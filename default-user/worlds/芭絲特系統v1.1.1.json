{
    "entries": {
        "2": {
            "uid": 2,
            "key": [],
            "keysecondary": [],
            "comment": "輸出規範",
            "content": "<status_format_example>\n绝对规则:\n- statustext是最後必定輸出的文本，若上下文有其他的狀態欄規則，也必須遵守並輸出\n- 其输出必须严格遵循XML格式，以<statustext>开始，以</statustext>结束\n- 每个女性角色必须包含完整的标签对\n- 身高和體重輸出數字+單位; 腰臀圍是數字，而胸圍是數字(罩杯)，禁止輸出文字形容詞\n- <character>仅在該角色在場景时输出\n- 描述性文本必须基于角色的实际生理状态\n- <reproduction>下，精子、卵子用於月經; 胎数、父亲、健康、供养、反应用於妊娠與分娩，若該階段欄位不適用輸出N/A\n- 使用前文所提及的時間格式，若無默認yyyy-MM-dd HH:mm\n- 使用前文所提及的地點格式，若無默認大場所 - 小區域\n- 若故事發生在現代寫實，种族只輸出人類\n- 若主控角色是女性，也需輸出其<character>文本，不能輸出未知\n格式模板：\n<statustext>\n  <time>{time}</time>\n  <location>{location}</location>\n  <character>\n  <namestr>{char}</namestr>\n    <appearance>\n      种族|{race}\n      年龄|{age}\n      身高|{height}\n      体重|{weight} \n      三围|{bust}/{waist}/{hip}\n    </appearance>\n    <physiology>\n      需求|{角色的生理需求，如飢餓/排泄/睡眠等}\n      性慾|{性慾值及狀態描述}\n      小穴|{根据当前生理状态描述阴道}\n      子宫|{宮壓值和根据当前生理状态描述子宫，若懷孕時須多描述羊膜/羊水}\n      菊穴|{根据当前生理状态描述肛门}\n      直腸|{根据当前生理状态描述直腸}\n      症状|{月经、妊娠、分娩于角色上的影响}\n      特质|{非典型身體性質}\n    </physiology>\n    <reproduction>\n      精子|{宫内总精子量和来源}\n      卵子|{宫内卵子数量}\n      胎数|{怀胎数和性別}\n      父亲|{精子来源}\n      健康|{妊娠健康值及状态描述情况}\n      供养|{胎盘、卵黄或其他供养源的状态描述}\n      反应|{胎儿、卵或其他类胚体的状态、位置及活动情况}\n    </reproduction>\n  </character>\n</statustext>\n\n</status_format_example>",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 200,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 2,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        },
        "3": {
            "uid": 3,
            "key": [],
            "keysecondary": [],
            "comment": "函数声明",
            "content": "---\n以下是可调用的函数:\nfunction updateExperience(female: str, exp: {virginity: str, mate: str, latestSexPartner: str, relationshipExperience:int, sexExperience: int, pregnantExperience: int, birthExperience: int, miscarriageExperience: int}) //設置角色情感与性经验\nfunction addSperm(female: str, male: str, amount: int) // 在角色子宫内注入精液(ml)\nfunction impregnate(female: str, male: str) // 让女性角色受精\nfunction setMenstrualPhases(female: str, stage: '卵泡期'|'排卵期'|'黄体期'|'月经期') // 设置/更改角色的月经周期\nfunction addEggs(female: str, amount: int) // 让女性角色排卵，不論是否排卵期\nfunction setPregnantDirectly(female: str, male: str, n:int, pregnantDays:int) // 让女性角色懷上n個孩子，經過pregnantDays天(對已懷孕者無效)\nfunction endPregnancy(female: str, miscarriage: bool) // 让角色生產或流產\nfunction adjustFetalPosition(female: str, fetusIndex: int, newPosition: '待定'|'頭位'|'臀位'|'橫位'|'斜位'|'糾纏'|'未知') //調整某一胎兒的胎位\nfunction adjustMoodEmoji(female: str, fetusIndex: int, newMoodEmoji: str) //調整某一胎兒的心情emoji\nfunction adjustFetalBias(female: str, fetusIndex: int, newBias: float) //調整某一胎兒的胎重, 值域[0.5, 2.0], 1.0為平衡點\nfunction passedTime(time: { day: int, hour: int, minute: int, week: int, month: int, year: int }) // 时间流逝处理\nsetvar('bf.female.isHere',bool); //該女性腳色是否在場\nsetvar('bf.female.libido', int); //調整女性角色的性慾, 值域[0, 100]\nsetvar('bf.female.uterinePressure', int); //調整女性角色的宫壓, 值域[0, 150], 未妊娠時最高25, 妊娠時需破80才開始進入產前陣痛\nsetvar('bf.female.pregnancyHealth', int); //調整女性角色的妊娠健康(養分), 值域[0, 200],100為平衡點\n\n使用以下格式进行调用:\n<%% function(arg1, arg2, ...) %%>\n例如:\n<%% updateExperience('{{char}}', {virginity: null}) %%> // null 為該角色是處女\n<%% updateExperience('{{char}}', {virginity: null, mate: '閨密',relationshipExperience:1}) %%> // null 為該角色是處女，而且與友人百合\n<%% updateExperience('{{char}}', {virginity: '{{user}}', sexExperience: 1}) %%> //被{{user}}奪走處女\n<%% updateExperience('{{char}}', {virginity: '高中男友', mate: '丈夫', latestSexPartner: '健身教練',relationshipExperience:4, sexExperience: 25,pregnantExperience: 2, birthExperience: 0, miscarriageExperience: 1}) %%> //該角色情史豐富\n<%% addSperm('{{char}}', '{{user}}',15) %%>\n<%% addSperm('{{char}}', '嫖客',-20) %%> // 清潔宮內精液\n<%% setMenstrualPhases('{{char}}', '排卵期') %%>\n<%% setPregnantDirectly('{{char}}', '{{user}}', 2, 120) %%>\n<%- adjustFetalPosition('{{char}}',0,'臀位') %>\n<%- adjustFetalBias('{{char}}',1, 1.6) %>\n<%% adjustMoodEmoji('{{char}}', 0, '💤') %%>\n<%% adjustMoodEmoji('{{char}}', 1, '💢') %%> \n<%% adjustMoodEmoji('{{char}}', 2, '🥳') %%>\n<%% passedTime({ minute: 30 }) %%>\n<%% passedTime({ hour: 2 }) %%>\n<%% passedTime({ day: 1, hour: 3 }) %%>\n<%% setvar('bf.{{char}}.isHere', true); %%>\n<%% setvar('bf.{{char}}.libido', 55); %%>\n<%% setvar('bf.{{char}}.uterinePressure', 21); %%>\n<%% setvar('bf.{{char}}.pregnancyHealth', 102); %%>\n注意：在恰当时机调用相应的函数，addSperm仅限于子宫，口交不算。\n---",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 0,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 3,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        },
        "4": {
            "uid": 4,
            "key": [],
            "keysecondary": [],
            "comment": "函数定义",
            "content": "<%\ndefine('menstrualStage', ['卵泡期','排卵期','黄体期','月经期']);\ndefine('pregnancyStage', ['孕早期','孕中期','孕晚期','临产期','逾期']);\ndefine('laborStage', ['第一产程','第二产程','第三产程']);\ndefine('fetusPosition', ['待定','頭位','臀位','橫位','斜位','糾纏','未知']);\nconst pregnancyStageDays = {\n    '孕早期': 84,\n    '孕中期': 105,\n    '孕晚期': 63,\n    '临产期': 28\n};\nconst menstrualStageDays = {\n    '卵泡期': 9,\n    '排卵期': 2,\n    '黄体期': 12,\n    '月经期': 5\n};\nconst laborStageBaseHours={\n    '第一产程': 12,\n    '第二产程': 2,\n    '第三产程': 0.25\n};\nconst laborStageIncrement={\n    '第一产程': 1.5,\n    '第二产程': 2,\n    '第三产程': 0.25\n};\ndefine('notifyCycle', function(female, forced = false) {\n    if(this.variables?.bf?.[female] === null) return;\n    const stage = this.getvar(`bf.${female}.stage`);\n    const days = this.getvar(`bf.${female}.days`, { defaults: 1 });\n    const notifySecondary = this.getvar(`bf.${female}.notifySecondary`);\n    // 怀孕期间的健康状态提示\n    if(pregnancyStage.includes(stage)) {\n        const pregnancyHealth = this.getvar(`bf.${female}.pregnancyHealth`, { defaults: 100 });\n        const uterinePressure = this.getvar(`bf.${female}.uterinePressure`, { defaults: 0 });\n\n        // 检查pregnancyHealth状态\n        if(pregnancyHealth < 70) {\n            this.setvar(`bf.${female}.notifySecondary`, `${female}的妊娠状态不稳，可能存在营养不足、过度疲劳或压力影响，应加强休息并适当补充能量`);\n        } else if(pregnancyHealth > 130) {\n            this.setvar(`bf.${female}.notifySecondary`, `${female}的妊娠状态偏高，可能出现代谢过载或胎儿发育过快，建议调整生活节奏并适度活动`);\n        }\n\n        // 检查uterinePressure状态\n        if(uterinePressure > 50) {\n            if(stage === '孕早期' || stage === '孕中期') {\n                this.setvar(`bf.${female}.notifySecondary`, `${female}的子宫压力过高，有流产风险`);\n            } else if(stage === '孕晚期' || stage === '临产期' || stage === '逾期') {\n                this.setvar(`bf.${female}.notifySecondary`, `${female}的子宫压力过高，即将生产`);\n            }\n        }\n    }\n    // 检查是否有notifySecondary，如果有则移动到notify\n    if(notifySecondary) {\n        this.setvar(`bf.${female}.notify`, notifySecondary);\n        this.setvar(`bf.${female}.notifySecondary`, null);\n        return;\n    }\n    if(stage === '产前阵痛') {\n        this.setvar(`bf.${female}.notify`, `${female}马上就要生了`);\n    } else if(forced || days === 1) {\n        if(stage === '孕早期')\n            this.setvar(`bf.${female}.notify`, `${female}怀孕了`);\n        else if(menstrualStage.includes(stage) || pregnancyStage.includes(stage) || laborStage.includes(stage)) {\n            this.setvar(`bf.${female}.notify`, `${female}进入了${stage}`);\n        }\n    } else {\n        this.setvar(`bf.${female}.notify`, null);\n    }\n});\ndefine('initFemale', function(female) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    // 初始化\n    this.setvar(`bf.${female}.days`, 1, { flags: 'nx' });\n    this.setvar(`bf.${female}.pregnantDays`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.laborHours`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.stage`, _.sample(menstrualStage), { flags: 'nx' });\n    this.setvar(`bf.${female}.isHere`, false, { flags: 'nx' });\n    // 初始化生理狀態參數\n    this.setvar(`bf.${female}.sperms`, [], { flags: 'nx' });\n    this.setvar(`bf.${female}.eggs`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.libido`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.uterinePressure`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.pregnancyHealth`, 100, { flags: 'nx' });\n    this.setvar(`bf.${female}.vitalityDrain`, 1.0, { flags: 'nx' });\n    this.setvar(`bf.${female}.pregnant`, [], { flags: 'nx' });\n    this.setvar(`bf.${female}.twinCounter`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.fetuses`, 0, { flags: 'nx' });\n    // 初始化生理隱藏參數\n    this.setvar(`bf.${female}.menstrualFluctuationDays`, 1, { flags: 'nx' });\n    this.setvar(`bf.${female}.gestationRate`, 1.0, { flags: 'nx' });\n    this.setvar(`bf.${female}.impregnationRate`, 1.0, { flags: 'nx' });\n    this.setvar(`bf.${female}.identicalProbability`, 10, { flags: 'nx' });\n    this.setvar(`bf.${female}.semiIdenticalProbability`, 2, { flags: 'nx' });\n    this.setvar(`bf.${female}.earlyFusionProbability`, 5, { flags: 'nx' });\n    this.setvar(`bf.${female}.sharedMembraneProbability`, 25, { flags: 'nx' });\n    this.setvar(`bf.${female}.superfetationProbability`, 1, { flags: 'nx' });\n    this.setvar(`bf.${female}.polyploidyProbability`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.birthDifficulty`, 1.0, { flags: 'nx' });\n    this.setvar(`bf.${female}.breedTolerance`, 1.0, { flags: 'nx' });\n    // 初始化情感與性經驗\n    this.setvar(`bf.${female}.virginity`, null, { flags: 'nx' });\n    this.setvar(`bf.${female}.mate`, null, { flags: 'nx' });\n    this.setvar(`bf.${female}.latestSexPartner`, null, { flags: 'nx' });\n    this.setvar(`bf.${female}.relationshipExperience`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.sexExperience`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.pregnantExperience`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.birthExperience`, 0, { flags: 'nx' });\n    this.setvar(`bf.${female}.miscarriageExperience`, 0, { flags: 'nx' });\n    // 文字化敘述\n    this.setvar(`bf.${female}.statustext`, {}, { flags: 'nx' });\n    // 初始化妊娠心情指標\n    //this.setvar(`bf.${female}.pregnancyAwareness`, 0, { flags: 'nx' });\n    //this.setvar(`bf.${female}.pregnancyAcceptance`, 0, { flags: 'nx' });\n    //this.setvar(`bf.${female}.PublicAwareness`, 0, { flags: 'nx' });\n    //this.setvar(`bf.${female}.PublicAcceptance`, 0, { flags: 'nx' });\n\n    this.setvar(`bf.${female}.notify`, null, { flags: 'nx' });\n    this.setvar(`bf.${female}.notifySecondary`, null, { flags: 'nx' });\n    console.log(`runID: ${runID}`);\n    console.log(`locals.runID: ${locals.runID}`);\n    console.log(`this.runID: ${this.runID}`);\n});\ndefine('updateExperience', function(female, options = {}) {\n    if (!female || this.variables?.bf?.[female] == null) return;\n    this.initFemale(female);\n    // 只允许这些字段被更新\n    const allowed = [\n        'virginity',\n        'mate',\n        'latestSexPartner',\n        'relationshipExperience',\n        'sexExperience',\n        'pregnantExperience',\n        'birthExperience',\n        'miscarriageExperience'\n    ];\n  \n    for (const key of allowed) {\n        if (options[key] !== undefined) {\n            this.setvar(`bf.${female}.${key}`, options[key]);\n        }\n    }\n});  \ndefine('updatePhysiologyProfile', function(female, options = {}) {\n    if (!female || this.variables?.bf?.[female] == null) return;\n    this.initFemale(female);\n  \n    const allowed = [\n        'menstrualFluctuationDays',\n        'gestationRate',\n        'birthDifficulty',\n        'impregnationRate',\n        'identicalProbability',\n        'semiIdenticalProbability',\n        'earlyFusionProbability',\n        'sharedMembraneProbability',\n        'superfetationProbability',\n        'polyploidyProbability',\n        'breedTolerance'\n    ];\n  \n    for (const key of allowed) {\n        if (options[key] !== undefined) {\n            this.setvar(`bf.${female}.${key}`, options[key]);\n        }\n    }\n});\ndefine('addSperm', function(female, male, amount) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let sperms = this.getvar(`bf.${female}.sperms`, { defaults: [] });\n    let found = false;\n    for(let i = 0; i < sperms.length; i++) {\n        if(sperms[i].male === male) {\n            sperms[i].value += amount;\n            if(sperms[i].value <= 0) {\n                sperms.splice(i, 1); // 当精子数量小于等于0时，从数组中移除\n            }\n            found = true;\n            break;\n        }\n    }\n    if(!found && amount > 0) {\n        sperms.push({ male: male, value: amount });\n    }\n    this.setvar(`bf.${female}.sperms`, sperms);\n});\ndefine('impregnate', function(female, male) {\n    if (!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    const stage = this.getvar(`bf.${female}.stage`);\n    if (!menstrualStage.includes(stage) && stage!=='已受精' && stage!=='孕早期'){\n        return;\n    }\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    let fetuses = this.getvar(`bf.${female}.fetuses`, { defaults: 0 });\n    let twinCounter = this.getvar(`bf.${female}.twinCounter`, { defaults: 0 });\n    const profile = this.getvar(`bf.${female}`, {\n        defaults: {\n            identicalProbability:          0,\n            semiIdenticalProbability:      0,\n            sharedMembraneProbability:     0,\n            earlyFusionProbability:        0,\n            superfetationProbability:      0,\n            polyploidyProbability:         0,\n        }\n    });\n\n    // 孕早期异期受孕检查\n    if (stage === '孕早期') {\n        if (_.random(0, 99) >= profile.superfetationProbability) {\n            return; // 未通过异期受孕概率检查，直接返回\n        }\n        // 通过检查，创建异期胎\n        let superfetationFetus = {\n            fathers: male,\n            gender: _.random(0, 1) ? '男' : '女',\n            twinId: null,\n            zygoteType: '異期胎',\n            impregnateDay: this.getvar(`bf.${female}.pregnantDays`, { defaults: 0 }),\n            fetalAge: 0,\n            fetalBias: _.random(0.5, 0.63),\n            position: '待定',\n            moodEmoji: '💤',\n        };\n\n        // 检查是否存在符合条件的独胎（fetalBias > 1.1，女性，独胎）\n        let existingFetus = pregnant.find(f => \n            f.zygoteType === '獨胎' && \n            f.fetalBias > 1.26 && \n            f.gender === '女'\n        );\n\n        // 如果找到符合条件的独胎，50%概率形成嵌套胎\n        if (existingFetus && _.random(0, 1)) {\n            existingFetus.zygoteType = '嵌套外胎';\n            existingFetus.twinId = twinCounter;\n            superfetationFetus.zygoteType = '嵌套內胎';\n            superfetationFetus.fetalBias = _.random(0.4, 0.5) // 養分更少\n            superfetationFetus.twinId = twinCounter;\n            this.incvar(`bf.${female}.twinCounter`, 1);\n        }\n\n        pregnant.push(superfetationFetus);\n        fetuses += 1;\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        this.setvar(`bf.${female}.fetuses`, fetuses);\n        return;\n    }\n\n    // 检查是否为双母源\n    const isDualMother = this.variables?.bf?.[male] !== undefined && this.variables.bf[male] !== null;\n    // 检查是否为自交\n    const isSelfFertilization = male === female;\n    // 其他受精類型\n    const isEarlyFusion     = _.random(0, 99) < profile.earlyFusionProbability;\n    const isIdentical       = _.random(0, 99) < profile.identicalProbability;\n    const isSemiIdentical   = _.random(0, 99) < profile.semiIdenticalProbability;\n    const isSharedMembrane  = _.random(0, 99) < profile.sharedMembraneProbability;\n\n    // 多倍体\n    const totalSperms = this.getvar(`bf.${female}.sperms`, { defaults: [] });\n    const eggs = this.getvar(`bf.${female}.eggs`, { defaults: 0 });\n    const totalSperm = totalSperms.reduce((sum, s) => sum + s.value, 0);\n    \n    if (totalSperm > 50 && eggs > 1 && _.random(0, 99) < profile.polyploidyProbability) {\n        // 创建多倍体胎儿\n        let polyploidyFetus = {\n            fathers: totalSperms.map(s => s.male).join('+'),\n            gender: _.random(0, 1) ? '男' : '女',\n            twinId: null,\n            zygoteType: '多倍體',\n            impregnateDay: this.getvar(`bf.${female}.pregnantDays`, { defaults: 0 }),\n            fetalAge: 0,\n            fetalBias: _.random(1.58, 2.51),\n            position: '待定',\n            moodEmoji: '💤',\n        };\n        \n        // 清空所有精子和卵子\n        this.setvar(`bf.${female}.sperms`, []);\n        this.setvar(`bf.${female}.eggs`, 0);\n        \n        pregnant.push(polyploidyFetus);\n        fetuses += 1;\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        this.setvar(`bf.${female}.fetuses`, fetuses);\n        return;\n    }\n\n    // 双母源\n    if (isDualMother) {\n        let dualMotherFetus = {\n            fathers: male,\n            gender: '女',\n            twinId: null,\n            zygoteType: '雙母源',\n            impregnateDay: this.getvar(`bf.${female}.pregnantDays`, { defaults: 0 }),\n            fetalAge: 0,\n            fetalBias: _.random(0.79, 1.0),\n            position: '待定',\n            moodEmoji: '💤',\n        };\n        pregnant.push(dualMotherFetus);\n        fetuses += 1;\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        this.setvar(`bf.${female}.fetuses`, fetuses);\n        return;\n    }\n\n    // 自交卵\n    if (isSelfFertilization) {\n        let selfFertilizationFetus = {\n            fathers: male,\n            gender: '扶她',\n            twinId: null,\n            zygoteType: '自交卵',\n            impregnateDay: this.getvar(`bf.${female}.pregnantDays`, { defaults: 0 }),\n            fetalAge: 0,\n            fetalBias: _.random(1.26, 1.58),\n            position: '待定',\n            moodEmoji: '💤',\n        };\n        pregnant.push(selfFertilizationFetus);\n        fetuses += 1;\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        this.setvar(`bf.${female}.fetuses`, fetuses);\n        return;\n    }\n    // 早期融合, 如果找到独胎，则合并父亲信息并设为融合卵\n    if (isEarlyFusion) {\n        let existingFetus = pregnant.find(f => f.zygoteType === '獨胎');\n        if (existingFetus) {\n            if (existingFetus.fathers !== male) {\n                existingFetus.fathers = `${existingFetus.fathers}+${male}`;\n            }\n            existingFetus.zygoteType = '融合卵';\n            existingFetus.twinId = twinCounter;\n            this.incvar(`bf.${female}.twinCounter`, 1);\n            existingFetus.fetalBias = _.random(1.58, 2.0);\n            // 50%概率变成扶她\n            if (_.random(0, 1)) {\n                existingFetus.gender = '扶她';\n            }\n            this.setvar(`bf.${female}.pregnant`, pregnant);\n            this.setvar(`bf.${female}.fetuses`, fetuses); //胎兒數不會變動\n            return;\n        }\n    }\n    // 准备新胎儿的基础属性\n    let newFetus = {\n        fathers: male,\n        gender: _.random(0, 1) ? '男' : '女',\n        twinId: null,\n        zygoteType: '獨胎',\n        impregnateDay: this.getvar(`bf.${female}.pregnantDays`, { defaults: 0 }),\n        fetalAge: 0,\n        fetalBias: _.random(1.0, 1.26),\n        position: '待定',\n        moodEmoji: '💤',\n    };\n    // 双胞胎概率计算\n    const sperms = this.getvar(`bf.${female}.sperms`, { defaults: [] });\n\n    if (isIdentical) {\n        let twinFetus;\n        const twinId = twinCounter;\n\n        if (isSemiIdentical) {\n            // 半同卵双胞胎：父亲不再要求不同，不同则合并；生长偏置大小区分\n            const allFathers = sperms.map(s => s.male);\n            const secondFather = _.sample(allFathers);\n            const fatherStr = (secondFather !== male) ? `${male}+${secondFather}` : male;\n            newFetus.fathers = fatherStr;\n            newFetus.zygoteType = '半同卵';\n            newFetus.fetalBias = _.random(1.26, 1.58);\n\n            twinFetus = {\n                fathers: fatherStr,\n                gender: _.random(0, 1) ? '男' : '女',\n                twinId,\n                zygoteType: '半同卵',\n                impregnateDay: newFetus.impregnateDay,\n                fetalAge: 0,\n                fetalBias: _.random(0.79, 1.0),\n                position: '待定',\n                moodEmoji: '💤',\n            };\n        } else {\n            // 纯同卵双胞胎：根据是否共享膜，50% 转为镜像双胞胎\n            let bias1, bias2;\n            let type1, type2;\n            if (isSharedMembrane) {\n                const isMirror = _.random(0, 99) < 50;\n                if (isMirror) {\n                    const mirrorBias = _.random(0.5, 1.0);\n                    bias1 = mirrorBias;\n                    bias2 = mirrorBias;\n                    type1 = type2 = '鏡像';\n                } else {\n                    bias1 = _.random(0.79, 1.0);\n                    bias2 = _.random(0.79, 1.0);\n                    type1 = type2 = '共囊';\n                }\n            } else {\n                bias1 = _.random(0.5, 1.0);\n                bias2 = _.random(0.5, 1.0);\n                type1 = type2 = '分囊';\n            }\n\n            newFetus.zygoteType = type1;\n            newFetus.fetalBias = bias1;\n            twinFetus = {\n                fathers: male,\n                gender: newFetus.gender,\n                twinId,\n                zygoteType: type2,\n                impregnateDay: newFetus.impregnateDay,\n                fetalAge: 0,\n                fetalBias: bias2,\n                position: '待定',\n                moodEmoji: '💤',\n            };\n        }\n\n        newFetus.twinId = twinId;\n        this.incvar(`bf.${female}.twinCounter`, 1);\n        pregnant.push(newFetus, twinFetus);\n        fetuses += 2;\n    } else {\n        // 单胎\n        pregnant.push(newFetus);\n        fetuses += 1;\n    }\n\n    this.setvar(`bf.${female}.pregnant`, pregnant);\n    this.setvar(`bf.${female}.fetuses`, fetuses);\n});\ndefine('setMenstrualPhases', function(female, stage) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let cur = this.getvar(`bf.${female}.stage`);\n    if(menstrualStage.includes(cur) && menstrualStage.includes(stage)) {\n        this.setvar(`bf.${female}`, { stage, days: 1 }, { merge: true });\n        this.notifyCycle(female);\n    }\n});\ndefine('addEggs', function(female, amount = 1) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    this.incvar(`bf.${female}.eggs`, amount);\n    this.incvar(`bf.${female}.uterinePressure`, 2); //排卵痛\n});\ndefine('setPregnantDirectly', function(female, male, n = 1, pregnantDays = 1, force = false) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    \n    // 安全检查：确保角色处于月经周期阶段，除非force为true\n    const currentStage = this.getvar(`bf.${female}.stage`);\n    if(!force && !menstrualStage.includes(currentStage)) {\n        console.log(`Cannot set pregnancy for ${female}: not in menstrual stage`);\n        return;\n    }\n    \n    // 清空当前状态\n    this.setvar(`bf.${female}.stage`, '排卵期');\n    this.setvar(`bf.${female}.pregnant`, []);\n    this.setvar(`bf.${female}.fetuses`, 0);\n    this.setvar(`bf.${female}.twinCounter`, 0);\n    this.setvar(`bf.${female}.pregnantDays`, 0);\n    this.setvar(`bf.${female}.laborHours`, 0);\n    \n    // 执行n次impregnate\n    for(let i = 0; i < n; i++) {\n        this.impregnate(female, male);\n    }\n    \n    // 设置孕期天数\n    this.setvar(`bf.${female}.pregnantDays`, pregnantDays);\n    let gestationRate = this.getvar(`bf.${female}.gestationRate`, { defaults: 1.0 });\n    \n    // 确定当前孕期阶段和当前阶段的天数\n    let stage = '孕早期';\n    let baseDays = 1;\n    let currentStageDays = 1;\n    for(let i = 0; i < pregnancyStage.length; i++) {\n        let nextBaseDays = baseDays + pregnancyStageDays[pregnancyStage[i]] / gestationRate;\n        if(pregnantDays >= baseDays && pregnantDays < nextBaseDays) {\n            stage = pregnancyStage[i];\n            currentStageDays = Math.floor(pregnantDays - baseDays + 1);\n            break;\n        }\n        baseDays = nextBaseDays;\n    }\n    \n    // 更新阶段和当前阶段天数\n    this.setvar(`bf.${female}.stage`, stage);\n    this.setvar(`bf.${female}.days`, currentStageDays);\n    \n    // 更新所有胎儿的实际发育情况與能量消耗\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    let breedTolerance = this.getvar(`bf.${female}.breedTolerance`, { defaults: 1.0 });\n    let fetalAgeSum = 0;\n    for(let fetus of pregnant) {\n        // 计算胎儿实际发育周数\n        let AgeInDays = (pregnantDays - fetus.impregnateDay) * gestationRate * fetus.fetalBias;\n        fetus.fetalAge = AgeInDays / 7;\n        fetalAgeSum += fetus.fetalAge;\n    }\n    let vitalityDrain = (fetalAgeSum / 40) / breedTolerance; \n    \n    this.setvar(`bf.${female}.pregnant`, pregnant);\n    this.setvar(`bf.${female}.vitalityDrain`, vitalityDrain);\n    this.notifyCycle(female);\n});\ndefine('endPregnancy', function(female, miscarriage = false) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let fetuses = this.getvar(`bf.${female}.fetuses`);\n    if(fetuses) {\n        if(miscarriage) {\n            this.incvar(`bf.${female}.miscarriageExperience`, 1);\n            this.setvar(`bf.${female}.notifySecondary`, `${female}流產了`);\n        } else {\n            this.incvar(`bf.${female}.birthExperience`, 1);\n            this.setvar(`bf.${female}.notifySecondary`, `${female}生下了${fetuses}个孩子`);\n        }\n        this.setvar(`bf.${female}`, { \n            stage: '产后恢复', \n            days: 1,\n            pregnant: [],\n            fetuses: 0,\n            twinCounter: 0,\n            uterinePressure: 0,\n            laborHours: 0\n        }, { merge: true });\n    }\n});\ndefine('adjustFetalBias', function(female, fetusIndex, newBias) {\n    if (!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    if (fetusIndex < 0 || fetusIndex >= pregnant.length) return;\n\n    let currentFetus = pregnant[fetusIndex];\n    const twinId = currentFetus.twinId;\n\n    // 镜像双胞胎：另一胎偏置仅与当前胎差异±0.01\n    if (currentFetus.zygoteType === '鏡像' && twinId != null) {\n        // 设置当前胎偏置\n        currentFetus.fetalBias = newBias;\n        // 找到镜像双胞胎\n        let mirrorTwin = pregnant.find(f => f !== currentFetus && f.twinId === twinId && f.zygoteType === '鏡像');\n        if (mirrorTwin) {\n            // 随机在[-0.01, 0.01]范围内微调\n            let delta = (Math.random() * 0.02) - 0.01;\n            mirrorTwin.fetalBias = Math.max(0.5, Math.min(2.0, newBias + delta));\n        }\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        return;\n    }\n    // 半同卵双胞胎：50% 概率把 newBias 喂给\"另一胎\"\n    if (currentFetus.zygoteType === '半同卵' && twinId != null) {\n        let sibling = pregnant.find(f => f !== currentFetus && f.twinId === twinId && f.zygoteType === '半同卵');\n        if (sibling && Math.random() < 0.5) {\n            // 一半机率作用到另一胎\n            sibling.fetalBias = newBias;\n        } else {\n            // 另一半机率作用到当前\n            currentFetus.fetalBias = newBias;\n        }\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n        return;\n  }\n\n    // 非镜像或其他情况\n    currentFetus.fetalBias = newBias;\n    this.setvar(`bf.${female}.pregnant`, pregnant);\n});\n\ndefine('adjustFetalPosition', function(female, fetusIndex, newPosition) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    if(fetusIndex < 0 || fetusIndex >= pregnant.length) return;\n\n    // 检查新位置是否有效\n    if(!fetusPosition.includes(newPosition)) return;\n\n    let currentFetus = pregnant[fetusIndex];\n    const twinId = currentFetus.twinId;\n\n    // 鏡像雙胞胎：任意位置設定都同步到另一胞胎，包括糾纏\n    if(currentFetus.zygoteType === '鏡像' && twinId != null) {\n        let mirrorTwin = pregnant.find(f => f !== currentFetus && f.twinId === twinId && f.zygoteType === '鏡像');\n        if(mirrorTwin) {\n            currentFetus.position = newPosition;\n            mirrorTwin.position = newPosition;\n            this.setvar(`bf.${female}.pregnant`, pregnant);\n            return;\n        }\n    }\n\n    // 共囊雙胞胎糾纏狀態\n    if(newPosition === '糾纏') {\n        if(currentFetus.zygoteType !== '共囊') return;\n        let twinFetus = pregnant.find(f => \n            f !== currentFetus && f.twinId === twinId && f.zygoteType === '共囊'\n        );\n        if(!twinFetus) return;\n        currentFetus.position = '糾纏';\n        twinFetus.position = '糾纏';\n    } else {\n        // 其他位置直接設定\n        currentFetus.position = newPosition;\n    }\n\n    this.setvar(`bf.${female}.pregnant`, pregnant);\n});\ndefine('adjustMoodEmoji', function(female, fetusIndex, newMoodEmoji) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    if(fetusIndex >= 0 && fetusIndex < pregnant.length) {\n        pregnant[fetusIndex].moodEmoji = newMoodEmoji;\n        this.setvar(`bf.${female}.pregnant`, pregnant);\n    }\n});\ndefine('passedTime', function(opt = { minute: 15 }) {\n    let remaining = (opt.day || 0) +\n        ((opt.hour || 0) * (1 / 24)) +\n        ((opt.minute || 0) * (1 / 24 / 60)) +\n        ((opt.second || 0) * (1 / 24 / 60 / 60)) +\n        (opt.month || 0) * 30 +\n        (opt.week || 0) * 7 +\n        (opt.year || 0) * 365;\n    while(remaining > 0) {\n        const passed = remaining > 1 ? 1 : remaining;\n        remaining -= passed;\n        for(let [char, data] of _.entries(this.variables.bf)) {\n            if(!char || !data) continue;\n            let stage = data.stage || '卵泡期';\n            // 取出舊的天數\n            const oldDays = data.days || 0;\n            const newDays = oldDays + passed;\n\n            // 由天數推算：時、天、週、月\n            const oldHourCount  = Math.floor(oldDays  * 24);\n            const newHourCount  = Math.floor(newDays  * 24);\n\n            const oldDayCount   = Math.floor(oldDays);\n            const newDayCount   = Math.floor(newDays);\n\n            const oldWeekCount  = Math.floor(oldDays  / 7);\n            const newWeekCount  = Math.floor(newDays  / 7);\n\n            const oldMonthCount = Math.floor(oldDays  / 30);\n            const newMonthCount = Math.floor(newDays  / 30);\n\n            // 判斷是否「新」一小時、一日、一週、一月\n            const isNewHour  = newHourCount  > oldHourCount;\n            const isNewDay   = newDayCount   > oldDayCount;\n            const isNewWeek  = newWeekCount  > oldWeekCount;\n            const isNewMonth = newMonthCount > oldMonthCount;\n\n             // 寫回最新天數\n            this.setvar(`bf.${char}.days`, newDays);\n            \n            // 如果是怀孕状态，累加怀孕天数\n            if(pregnancyStage.includes(stage) || stage === '产前阵痛' || laborStage.includes(stage)) {\n                let pregnantDays = this.getvar(`bf.${char}.pregnantDays`, { defaults: 0 });\n                pregnantDays += passed;\n                this.setvar(`bf.${char}.pregnantDays`, pregnantDays);\n                \n                // 更新每个胎儿的实际发育情况\n                let pregnant = this.getvar(`bf.${char}.pregnant`, { defaults: [] });\n                let gestationRate = this.getvar(`bf.${char}.gestationRate`, { defaults: 1.0 });\n                \n                for(let fetus of pregnant) {\n                    // 计算胎儿实际发育周数\n                    let AgeInDays = (pregnantDays - fetus.impregnateDay) * gestationRate * fetus.fetalBias;\n                    fetus.fetalAge = AgeInDays / 7;\n                }\n                \n                this.setvar(`bf.${char}.pregnant`, pregnant);\n            }\n\n            if(menstrualStage.includes(stage)) {\n                // 计算当前阶段的实际天数（包括波动）\n                let menstrualFluctuationDays = this.getvar(`bf.${char}.menstrualFluctuationDays`, { defaults: 1 });\n                let actualDays = menstrualStageDays[stage] + _.random(0, menstrualFluctuationDays);\n                if(newDayCount > actualDays) {\n                    let nextIndex = (menstrualStage.indexOf(stage) + 1) % menstrualStage.length;\n                    stage = menstrualStage[nextIndex];\n                    // 计算\"跨阶段剩余天数\"\n                    const overflowDays = newDayCount - actualDays;\n                    const nextStageDays = Math.max(1, overflowDays);\n                    this.setvar(`bf.${char}`, { stage, days: nextStageDays }, { merge: true });\n                }\n                if (stage === '月经期' && isNewDay){\n                    this.incvar(`bf.${char}.uterinePressure`, 5); //月經痛\n                }\n            } else if(pregnancyStage.includes(stage)) {\n                let pregnantDays = this.getvar(`bf.${char}.pregnantDays`, { defaults: 0 });\n                const gestationRate = this.getvar(`bf.${char}.gestationRate`, { defaults: 1.0 });\n                const isHere =  this.getvar(`bf.${char}.isHere`, { defaults: false });\n                // 計算vitalityDrain\n                let pregnant = this.getvar(`bf.${char}.pregnant`, { defaults: [] });\n                let breedTolerance = this.getvar(`bf.${char}.breedTolerance`, { defaults: 1.0 });\n                let fetalAgeSum = 0;\n                for(let fetus of pregnant) {\n                    fetalAgeSum += fetus.fetalAge;\n                }\n                let fetalLoad = fetalAgeSum / 40; // 隨著孕期發展, 耗能逐漸增加\n                let vitalityDrain = fetalLoad / breedTolerance; \n                this.setvar(`bf.${char}.vitalityDrain`, vitalityDrain);\n\n                //跨日\n                let uterinePressure = this.getvar(`bf.${char}.uterinePressure`, { defaults: 0 });\n                let pregnancyHealth = this.getvar(`bf.${char}.pregnancyHealth`, { defaults: 100 });\n                if(stage === '逾期') {\n                    if(isNewDay) {\n                        const overdueDays = pregnantDays/gestationRate - 280; //還原人類逾期天數\n                        // 自然催產\n                        this.incvar(`bf.${char}.uterinePressure`, vitalityDrain*(newDayCount-oldDayCount) + overdueDays*0.5);\n                        const overdueMultiplier = 1 + overdueDays * 0.02; // 每天+2%，逐日累加惡化\n                        this.incvar(`bf.${char}.pregnancyHealth`, -vitalityDrain * overdueMultiplier);\n                    }\n                } else {\n                    // 计算当前阶段的天数阈值\n                    let currentStageIndex = pregnancyStage.indexOf(stage);\n                    let baseDays = 0;\n                    // 计算当前阶段之前的所有阶段天数总和\n                    for(let i = 0; i < currentStageIndex; i++) {\n                        baseDays += pregnancyStageDays[pregnancyStage[i]] / gestationRate;\n                    }\n                    // 计算当前阶段的天数阈值\n                    let daysThreshold = baseDays + pregnancyStageDays[stage] / gestationRate;\n                    \n                    // 如果超过当前阶段阈值，需要确定最终阶段\n                    if(pregnantDays >= daysThreshold) {\n                        let finalStage = stage;\n                        let finalStageDays = 1;\n                        let remainingDays = pregnantDays;\n                        \n                        // 遍历所有后续阶段，找到最终阶段\n                        for(let i = currentStageIndex; i < pregnancyStage.length; i++) {\n                            let stageDays = pregnancyStageDays[pregnancyStage[i]] / gestationRate;\n                            if(remainingDays >= stageDays) {\n                                remainingDays -= stageDays;\n                                if(i < pregnancyStage.length - 1) {\n                                    finalStage = pregnancyStage[i + 1];\n                                } else {\n                                    finalStage = '逾期';\n                                }\n                            } else {\n                                finalStageDays = Math.max(1, Math.floor(remainingDays));\n                                break;\n                            }\n                        }\n                        \n                        this.setvar(`bf.${char}`, { stage: finalStage, days: finalStageDays }, { merge: true });\n                        this.notifyCycle(char, true);\n                    }\n                    \n                    if(isNewDay && isHere) {\n                        // 日常孕期壓力，角色需在場才執行事件判定\n                        this.incvar(`bf.${char}.uterinePressure`, vitalityDrain*(newDayCount-oldDayCount)); \n                        this.incvar(`bf.${char}.pregnancyHealth`, -vitalityDrain*(newDayCount-oldDayCount)); \n                    }\n                }\n\n                //分娩判定，角色需在場才執行事件判定\n                if(uterinePressure >= 80 && isHere) {\n                    if(stage === '孕早期' || stage === '孕中期') {\n                        // 早期和中期压力过大导致流产\n                        this.endPregnancy(char, true);\n                    } else if(stage === '孕晚期' || stage === '临产期' || stage === '逾期') {\n                        // 晚期、临产期和逾期可以触发产前阵痛\n                        this.setvar(`bf.${char}`, { stage: '产前阵痛', days: 1 }, { merge: true });\n                        this.notifyCycle(char, true);\n                    }\n                }\n                //跨週\n                if (isNewWeek){\n                    let biasAdjustment = (pregnancyHealth-100) / 2000 * (newWeekCount - oldWeekCount);\n                    for (let i=0; i<pregnant.length; i++){\n                        const oldBias = pregnant[i].fetalBias;\n                        this.adjustFetalBias(char, i, biasAdjustment + oldBias);\n                    }\n                }\n                //跨月\n                if (isNewMonth){\n                    let fetalBiasSum = 0;\n                    for(let fetus of pregnant) {\n                        fetalBiasSum += fetus.fetalBias;\n                    }\n                    let fetalBiasAvg = pregnant.length > 0 ? fetalBiasSum / pregnant.length : 0;\n                    let adjustBreedTolerance = (1 - fetalBiasAvg) * 0.01*(newMonthCount - oldMonthCount);  // 胎兒偏小，適應力提升\n                    let adjustBirthDifficulty = (fetalBiasAvg - 1)**2 * 0.02*(newMonthCount - oldMonthCount); // 胎兒偏大，難產率上升\n                    this.incvar(`bf.${char}.breedTolerance`, adjustBreedTolerance);\n                    this.incvar(`bf.${char}.birthDifficulty`, adjustBirthDifficulty);\n                }\n\n                \n            } else if (stage === '产前阵痛') {\n                if(_.random(1, 3) === 1) {\n                    this.setvar(`bf.${char}`, { stage: '第一产程', days: 1 }, { merge: true });\n                }\n            } else if (laborStage.includes(stage)) {\n                this.inLabor(char, passed);\n            } else if (stage === '产后恢复') {\n                let birthDifficulty = this.getvar(`bf.${char}.birthDifficulty`, { defaults: 1.0 });\n                let gestationRate = this.getvar(`bf.${char}.gestationRate`, { defaults: 1.0 });\n                let recoveryDays = 28 * birthDifficulty / gestationRate;\n                if(newDayCount > recoveryDays) {\n                    this.setvar(`bf.${char}`, { stage: _.sample(menstrualStage), days: 1, pregnant: [] }, { merge: true });\n                }\n            } else if (stage == '已受精') {\n                if(newDayCount > 2 && _.random(0, 1)) {\n                    this.incvar(`bf.${char}.pregnantExperience`, 1);\n                    this.setvar(`bf.${char}`, { stage: '孕早期', days: 1 }, { merge: true });\n                }\n            }\n\n            if(stage === '排卵期' && isNewDay) {\n                // 排卵期每天都有机会排卵\n                this.addEggs(char, 1);\n            }\n\n            let eggs = data.eggs || 0;\n            if(eggs > 0) {\n                // 卵子只在非排卵期减少\n                if(isNewDay && stage !== '排卵期') {\n                    eggs -= 1;\n                }\n                if(stage === '月经期') {\n                    eggs = 0;\n                }\n            }\n            for(let egg = 1; egg < eggs; egg++) {\n                let impregnationRate = this.getvar(`bf.${char}.impregnationRate`, { defaults: 1.0 });\n                let baseChance = 10 * impregnationRate; // 基础受孕概率阈值\n                let chance = _.random(1, 1000) * passed;\n                console.log(`impregnate chance ${chance} for ${char} (probability: ${impregnationRate})`);\n                if(chance > baseChance) {\n                    let sperms = this.getvar(`bf.${char}.sperms`, { defaults: [] });\n                    let availableSperms = sperms.filter(s => s.value > 0);\n                    if(availableSperms.length > 0) {\n                        let selectedSperm = _.sample(availableSperms);\n                        this.addSperm(char, selectedSperm.male, -10 * passed);\n                        this.impregnate(char, selectedSperm.male);\n                        eggs -= 1;\n                    }\n                }\n            }\n\n            if(menstrualStage.includes(stage) && data.fetuses > 0) {\n                this.setvar(`bf.${char}`, { stage: '已受精', days: 1 }, { merge: true });\n            }\n            \n            // 检查高潮排卵\n            let libido = this.getvar(`bf.${char}.libido`, { defaults: 0 });\n            if (libido >= 100) {\n                // 只在月经周期、已受精和孕早期允许排卵\n                if (menstrualStage.includes(stage) || stage === '已受精' || stage === '孕早期') {\n                    // 直接排卵\n                    //this.addEggs(char, 1);\n                    // 设置提示信息\n                    this.setvar(`bf.${char}.notifySecondary`, `${char}因高潮而額外排卵，性慾歸零`);\n                } else {\n                    // 其他周期只重置性欲\n                    this.setvar(`bf.${char}.notifySecondary`, `${char}因高潮而性慾歸零`);\n                }\n                // 重置性欲值，进入冷却\n                //this.setvar(`bf.${char}.libido`, 0);\n            }\n            \n            let sperms = this.getvar(`bf.${char}.sperms`, { defaults: [] });\n            for(let sperm of sperms) {\n                if(sperm.value > 0) {\n                    if(stage === '月经期') {\n                        sperm.value = 0;\n                    } else {\n                        this.addSperm(char, sperm.male, -passed * 10);\n                    }\n                }\n            }\n            // 月經週期, 已受精, 孕早期, 和产后恢复都允許精子留存\n            if(!menstrualStage.includes(stage) && stage !== '已受精' && stage !== '孕早期' && stage !== '产后恢复') {\n                this.setvar(`bf.${char}.sperms`, []);\n            }\n            \n            this.setvar(`bf.${char}.eggs`, eggs);\n            this.notifyCycle(char);\n        }\n    }\n});\ndefine('inLabor', function(female, passed) {\n    if(!female || this.variables?.bf?.[female] === null) return;\n    this.initFemale(female);\n    let stage = this.getvar(`bf.${female}.stage`);\n    let pregnant = this.getvar(`bf.${female}.pregnant`, { defaults: [] });\n    let fetuses = this.getvar(`bf.${female}.fetuses`, { defaults: 1 });\n    let birthDifficulty = this.getvar(`bf.${female}.birthDifficulty`, { defaults: 1.0 });\n    let uterinePressure = this.getvar(`bf.${female}.uterinePressure`, { defaults: 0 });\n    let passedHours = passed * 24; // 将天数转换为小时\n    \n    // 计算各产程所需时间\n    let t1 = (laborStageBaseHours['第一产程'] + (fetuses - 1) * laborStageIncrement['第一产程']) * birthDifficulty;\n    let t2 = (laborStageBaseHours['第二产程'] + (fetuses - 1) * laborStageIncrement['第二产程']) * birthDifficulty;\n    let t3 = (laborStageBaseHours['第三产程'] + (fetuses - 1) * laborStageIncrement['第三产程']) * birthDifficulty;\n    \n    // 获取当前产程已进行的时间\n    let currentStageHours = this.getvar(`bf.${female}.laborHours`, { defaults: 0 });\n\n    if(uterinePressure < 80){\n        let chanceToStall = 100 - uterinePressure;\n        if (_.random(0, 99) < chanceToStall) {\n            // 產程停滯，不推進時間\n            this.setvar(`bf.${female}.notifySecondary`, `${female}的子宫收缩微弱，产程进展停滞`);\n            return; \n        }\n    } else if(uterinePressure >= 120) {\n        // 当子宫压力达到120时，产程加速\n        if(stage === '第一产程') {\n            // 直接进入第二产程\n            this.setvar(`bf.${female}`, {stage: '第二产程'}, { merge: true });\n            this.setvar(`bf.${female}.notifySecondary`, `${female}的子宫压力过大，产程加速！`);\n            this.notifyCycle(female, true);\n        } else if(stage === '第二产程') {\n            // 第二产程加速，让一个胎儿出生\n            if(pregnant.length > 0) {\n                let msg = this.getvar(`bf.${female}.notifySecondary`, { defaults: '' });\n                let baby = pregnant.shift();\n                msg += `${female} 生下了 ${baby.fathers} 的孩子，性別為 ${baby.gender}\\n`;\n                this.setvar(`bf.${female}.pregnant`, pregnant);\n                this.setvar(`bf.${female}.notifySecondary`, msg);\n                \n                // 如果所有胎儿都已出生，进入第三产程\n                if(pregnant.length === 0) {\n                    this.setvar(`bf.${female}`, {stage: '第三产程'}, { merge: true });\n                    this.notifyCycle(female, true);\n                }\n            }\n        } else if(stage === '第三产程') {\n            // 第三产程直接结束分娩\n            this.endPregnancy(female);\n        }\n        return;\n    }\n\n    currentStageHours += passedHours;\n    this.setvar(`bf.${female}.laborHours`, currentStageHours);\n    // 根据当前产程判断是否进入下一阶段\n    if(stage === '第一产程'){\n        if(currentStageHours>=t1){\n            // 进入第二产程\n            this.setvar(`bf.${female}`, {stage: '第二产程'}, { merge: true });\n            this.notifyCycle(female, true);\n        }\n    } else if(stage === '第二产程') {\n        // 计算自第一产程结束后，在第二产程里到底过了多少小时\n        let hoursInSecond = currentStageHours - t1;\n        // 一个胎儿出生需要的小时数\n        let inc2 = laborStageIncrement['第二产程'] * birthDifficulty;        \n        // 能出生多少个（不超过剩余胎儿数）\n        let births = Math.min(Math.floor(hoursInSecond / inc2), pregnant.length);\n        // 先取出已经累积的信息（默认空字符串）\n        let msg = this.getvar(`bf.${female}.notifySecondary`, { defaults: '' });\n\n        // 如果时间累积足够让至少一个胎儿出生\n        if (births > 0) {\n            // 依序出生\n            for (let i = 0; i < births; i++) {\n                let baby = pregnant.shift();\n                msg += `${female} 生下了 ${baby.fathers} 的孩子，性別為 ${baby.gender}\\n`;\n            }\n            // 更新剩余的胎儿列表\n            this.setvar(`bf.${female}.pregnant`, pregnant);\n            // 写回累加后的字符串\n            this.setvar(`bf.${female}.notifySecondary`, msg);\n        }\n\n        if (pregnant.length === 0)  {\n            this.setvar(`bf.${female}`, { stage: '第三产程'}, { merge: true });\n            this.notifyCycle(female, true);\n        }\n        \n    } else if(stage === '第三产程') {\n        // 总耗时达到 t3, 分娩結束\n        if (currentStageHours >= t1 + t2 + t3) {\n            this.endPregnancy(female);\n        }\n    }\n});\n-%>",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 10,
            "position": 0,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 4,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": null,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 4,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        },
        "5": {
            "uid": 5,
            "key": [],
            "keysecondary": [],
            "comment": "普通状态(没有栏)",
            "content": "<% \nfunction getWeightLevel(fetalBias) {\n    const logValue = Math.log10(fetalBias);\n    if (logValue <= -0.3010) return -3;\n    if (logValue <= -0.2007) return -2;\n    if (logValue <= -0.1003) return -1;\n    if (logValue <= 0.1003) return 0;\n    if (logValue <= 0.2007) return 1;\n    if (logValue <= 0.3010) return 2;\n    return 3;\n}\n\nfunction getWeightLevelText(level) {\n    const levels = {\n        '-3': '极轻',\n        '-2': '较轻',\n        '-1': '偏轻',\n        '0': '正常',\n        '1': '偏重',\n        '2': '较重',\n        '3': '极重'\n    };\n    return levels[level] || '未知';\n}\n%>\n<% for(let char in variables.bf) { %>\n<% if(char && variables.bf[char] && !variables.bf[char].notify) { const data = variables.bf[char]; -%>\n名字: <%- char %>, 在場:<%- data.isHere%>\n- 当前阶段: <%- data.stage %>\n- 性慾: <%- data.libido %>\n- 宫壓: <%- Math.round(data.uterinePressure) %>\n<% if(menstrualStage.includes(data.stage)) { -%>\n- 生理期: <%- data.stage %> (<%- menstrualStage.includes(data.stage) ? (data.eggs > 0 ? '危险日' : '安全日') : '' %>)\n<% } -%>\n- 宮内卵子<%- data.eggs %>顆\n<% if(data.sperms && data.sperms.length > 0) { -%>\n- 宮内精液(共计<%- Math.round(data.sperms.reduce((sum, s) => sum + s.value, 0)) %>ml):\n<% for(let sperm of data.sperms) { if (sperm.value > 0) { -%>\n- <%- sperm.male %>, <%- Math.round(sperm.value) %>ml\n<% } } } -%>\n<% if(pregnancyStage.includes(data.stage) || data.stage === '产前阵痛' || laborStage.includes(data.stage)) { -%>\n- 孕期: 第<%- Math.floor(data.pregnantDays/7) %>周 <%- Math.floor(data.pregnantDays%7) %>天\n- 胎兒消耗: <%- data.vitalityDrain.toFixed(2) %>\n- 妊娠健康: <%- Math.round(data.pregnancyHealth) %>\n<% if(data.pregnant && data.pregnant.length > 0) { -%>\n- 胎儿信息:\n<% for(let fetus of data.pregnant) { -%>\n* 父亲: <%- fetus.fathers %>\n* 性别: <%- fetus.gender %>\n* 類型: <%- fetus.zygoteType %>\n* 體重: <%- getWeightLevelText(getWeightLevel(fetus.fetalBias)) %>\n* 胎位: <%- fetus.position %>\n* 心情: <%- fetus.moodEmoji %>\n<% if(fetus.twinId !== null) { -%>\n* 双胞胎ID: <%- fetus.twinId %>\n<% } -%>\n<% } } -%>\n<% } -%>\n\n- 情感与性经验:\n<% if(data.virginity === null) { -%>\n- 处女: null\n<% } else if(data.virginity) { -%>\n- 处女: <%- data.virginity %>\n- 最近性伴: <%- data.latestSexPartner %>\n- 感情經驗: <%- data.relationshipExperience|| 0 %>人\n- 性交經驗: <%- data.sexExperience || 0 %>次\n- 怀孕: <%- data.pregnantExperience || 0 %>次\n<% if(data.miscarriageExperience > 0) { -%>\n- 流产: <%- data.miscarriageExperience %>次\n<% } -%>\n<% } -%>\n<% if(data.mate) { -%>\n- 現任伴侣: <%- data.mate %>\n<% } -%>\n<% } } %>",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 300,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 5,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        },
        "6": {
            "uid": 6,
            "key": [],
            "keysecondary": [],
            "comment": "强调状态(没有栏)",
            "content": "<% for(let char in variables.bf) { if(char && variables.bf[char] && variables.bf[char].notify) { %>\n名字: <%- char %>\n- 重要状况: <%- variables.bf[char].notify %>\n<% } } %>",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 400,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 6,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        },
        "7": {
            "uid": 7,
            "key": [],
            "keysecondary": [],
            "comment": "指令",
            "content": "```\n**指令**\n考虑调用函数：\n<% if(!_.isEmpty(variables.bf)) { -%>\n为上下文提到的除了这些以外的女性角色设置月经周期，以及符合她們背景設定的情感与性经验: <%- _.keys(variables.bf).join(', ') %>。\n<% } else { -%>\n为上下文中提到的所有女性角色設置月经周期, 以及符合她們背景設定的情感与性经验。\n<% } -%>\n在时间流逝、场景变化等会发生时间变化的情况下时应当调用**时间流逝处理**函数，且須對齊<statustext>中的<time>輸出變化\n调用函数时不应该包含任何注释信息。\n使用相應函數，判斷女性角色是否在場景中。\n当女性角色使用阴道进行性交时必须调用相应函数。\n懷孕時，調整emoji來表現寶寶的情緒反應。\n進入第一/二/三产程時才能破水分娩，临产期/逾期/产前阵痛時不算進入分娩，嚴禁生產行為\n```",
            "constant": true,
            "vectorized": false,
            "selective": true,
            "selectiveLogic": 0,
            "addMemo": true,
            "order": 100,
            "position": 4,
            "disable": false,
            "excludeRecursion": false,
            "preventRecursion": false,
            "delayUntilRecursion": false,
            "probability": 100,
            "useProbability": true,
            "depth": 0,
            "group": "",
            "groupOverride": false,
            "groupWeight": 100,
            "scanDepth": null,
            "caseSensitive": null,
            "matchWholeWords": null,
            "useGroupScoring": null,
            "automationId": "",
            "role": 0,
            "sticky": 0,
            "cooldown": 0,
            "delay": 0,
            "displayIndex": 7,
            "matchPersonaDescription": false,
            "matchCharacterDescription": false,
            "matchCharacterPersonality": false,
            "matchCharacterDepthPrompt": false,
            "matchScenario": false,
            "matchCreatorNotes": false
        }
    }
}