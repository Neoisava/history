{"key":"data/default-user/characters/地图导航模块.png-1749545704831.3918","value":"{\"name\":\"地图导航模块\",\"description\":\" \",\"personality\":\"\",\"scenario\":\"\",\"first_mes\":\"局部正则上移,世界书设为全局,欢迎把本系统集成到你的卡里!留个连接帮忙推广下,谢谢!\\r\\n需要安装前端助手!\\r\\n\\r\\n\\r\\n<details><summary>**地图导航**</summary>\\r\\n<map_data>\\r\\n [MOVEBLOCK:NO]\\r\\n [Aki的工具\\r\\n - World Builder:AKI\\r\\n - Character Builder:\\r\\n - 百度贴吧评论系统: ]\\r\\n [住宅区街道\\r\\n - 哲家门口: \\r\\n - 千纱家门口:千纱\\r\\n - 公园入口: ]\\r\\n [商业街\\r\\n - 便利店:妈妈\\r\\n - 游戏厅:灯山 雪\\r\\n - 书店: ]\\r\\n </map_data>\\r\\n</details>\",\"mes_example\":\"\",\"creatorcomment\":\"\",\"avatar\":\"none\",\"talkativeness\":\"0.5\",\"fav\":false,\"tags\":[],\"spec\":\"chara_card_v3\",\"spec_version\":\"3.0\",\"data\":{\"name\":\"地图导航模块\",\"description\":\" \",\"personality\":\"\",\"scenario\":\"\",\"first_mes\":\"局部正则上移,世界书设为全局,欢迎把本系统集成到你的卡里!留个连接帮忙推广下,谢谢!\\r\\n需要安装前端助手!\\r\\n\\r\\n\\r\\n<details><summary>**地图导航**</summary>\\r\\n<map_data>\\r\\n [MOVEBLOCK:NO]\\r\\n [Aki的工具\\r\\n - World Builder:AKI\\r\\n - Character Builder:\\r\\n - 百度贴吧评论系统: ]\\r\\n [住宅区街道\\r\\n - 哲家门口: \\r\\n - 千纱家门口:千纱\\r\\n - 公园入口: ]\\r\\n [商业街\\r\\n - 便利店:妈妈\\r\\n - 游戏厅:灯山 雪\\r\\n - 书店: ]\\r\\n </map_data>\\r\\n</details>\",\"mes_example\":\"\",\"creator_notes\":\"\",\"system_prompt\":\"\",\"post_history_instructions\":\"\",\"tags\":[],\"creator\":\"\",\"character_version\":\"\",\"alternate_greetings\":[],\"extensions\":{\"talkativeness\":\"0.5\",\"fav\":false,\"world\":\"地图导航模块\",\"depth_prompt\":{\"prompt\":\"\",\"depth\":4,\"role\":\"system\"},\"regex_scripts\":[{\"id\":\"699330b6-61fa-488b-96e7-c9e00a0eb553\",\"scriptName\":\"[低饱和莫兰迪风格]脚本-导航模块\",\"findRegex\":\"<map_data>([\\\\s\\\\S]*?)<\\\\/map_data>\",\"replaceString\":\"```\\n<!DOCTYPE html>\\n<html lang=\\\"zh-CN\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>恋爱冒险地图</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\\\">\\n    <link href=\\\"https://fonts.googleapis.com/css2?family=ZCOOL+XiaoWei&family=ZCOOL+QingKe+HuangYou&display=swap\\\" rel=\\\"stylesheet\\\">\\n</head>\\n<body>\\n    <div id=\\\"map-data-source\\\" style=\\\"display:none;\\\">$1</div>\\n    <div class=\\\"map-interface\\\">\\n        <div class=\\\"map-header\\\">\\n            <h2 id=\\\"map-title\\\">通用地图导航</h2>\\n            <div class=\\\"map-controls\\\">\\n                <div class=\\\"send-mode-toggle\\\">\\n                    <label class=\\\"toggle-switch\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"direct-send-toggle\\\" checked>\\n                        <span class=\\\"toggle-slider\\\"></span>\\n                    </label>\\n                    <span class=\\\"toggle-label\\\">直接发送</span>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!-- 移动限制提示 -->\\n        <div id=\\\"movement-alert\\\" class=\\\"movement-alert hidden\\\">\\n            <i class=\\\"fas fa-exclamation-triangle\\\"></i> 提示：你现在无法移动        </div>\\n\\n        <!-- 主地点选择区域 -->\\n        <div id=\\\"main-locations\\\" class=\\\"location-grid\\\">\\n            <!-- 主要地点按钮将在这里动态生成 -->\\n        </div>\\n\\n        <!-- 次级地点选择区域 -->\\n        <div id=\\\"sub-locations\\\" class=\\\"sub-location-grid hidden\\\">\\n            <!-- 次级地点按钮将在这里动态生成 -->\\n        </div>\\n\\n        <!-- 地点详情区域 -->\\n        <div id=\\\"location-details\\\" class=\\\"location-details hidden\\\">\\n            <div class=\\\"detail-header\\\">\\n                <i class=\\\"fas fa-map-marker-alt\\\"></i> <span id=\\\"selected-location\\\">未选择</span>\\n            </div>\\n            <div class=\\\"detail-content\\\">\\n                <div class=\\\"character-section\\\">\\n                    <div class=\\\"section-title\\\"><i class=\\\"fas fa-user-friends\\\"></i> 可能遇见的人</div>\\n                    <div id=\\\"location-characters\\\" class=\\\"character-list\\\">\\n                        <!-- 角色列表将在这里动态生成 -->\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"action-section\\\">\\n                <button id=\\\"confirm-move-btn\\\" class=\\\"action-button\\\">\\n                    <i class=\\\"fas fa-walking\\\"></i> 前往此处\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!-- 确认移动弹窗 -->\\n    <div id=\\\"confirm-overlay\\\" class=\\\"modal-overlay hidden\\\">\\n        <div class=\\\"confirm-dialog\\\">\\n            <h4>确认前往</h4>\\n            <p id=\\\"confirm-message\\\"></p>\\n            <div class=\\\"dialog-buttons\\\">\\n                <button id=\\\"cancel-move-btn\\\" class=\\\"dialog-button cancel-button\\\">\\n                    <i class=\\\"fas fa-times\\\"></i> 再想想\\n                </button>\\n                <button id=\\\"execute-move-btn\\\" class=\\\"dialog-button confirm-button\\\">\\n                    <i class=\\\"fas fa-check\\\"></i> 出发吧\\n                </button>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <script>\\n        // 全局变量\\n        let mapData = null;\\n        let selectedMain = null;\\n        let selectedSub = null;\\n        let selectedCharacters = [];\\n        let hasMoveBlock = false;\\n\\n        // 解析地图数据\\n        function parseMapData(text) {\\n            if (!text || typeof text !== 'string') {\\n                console.error(\\\"无效的地图数据\\\", text);\\n                return null;\\n            }\\n\\n            console.log(\\\"开始解析地图数据:\\\", text.substring(0, 50) + \\\"...\\\");\\n\\n            const data = {\\n                moveBlocked: false,\\n                locations: []\\n            };\\n\\n            try {\\n                // 解析移动限制状态\\n                const moveBlockMatch = /\\\\[MOVEBLOCK:(YES|NO)\\\\]/.exec(text);\\n                if (moveBlockMatch) {\\n                    data.moveBlocked = moveBlockMatch[1] === 'YES';\\n                }\\n\\n                // 预处理：移除HTML标签以避免干扰\\n                let cleanText = text.replace(/<[^>]*>/g, '');\\n                \\n                // 将文本分割成多行进行解析\\n                const lines = cleanText.split('\\\\n');\\n                let currentMainLocation = null;\\n                let currentSubLocations = [];\\n                \\n                for (let i = 0; i < lines.length; i++) {\\n                    const line = lines[i].trim();\\n                    \\n                    // 跳过空行和MOVEBLOCK行\\n                    if (!line || line.startsWith('[MOVEBLOCK:')) continue;\\n                    \\n                    // 主地点行 - 以[开头但不是[MOVEBLOCK:\\n                    if (line.startsWith('[') && !line.startsWith('[MOVEBLOCK:')) {\\n                        // 如果已经有一个主地点正在处理，保存它\\n                        if (currentMainLocation) {\\n                            data.locations.push({\\n                                name: currentMainLocation,\\n                                subLocations: currentSubLocations\\n                            });\\n                        }\\n                        \\n                        // 提取新的主地点名\\n                        const mainLocationName = line.replace('[', '').trim();\\n                        console.log(\\\"发现主地点:\\\", mainLocationName);\\n                        currentMainLocation = mainLocationName;\\n                        currentSubLocations = [];\\n                    }\\n                    // 子地点行 - 以-开头\\n                    else if (line.startsWith('-') && currentMainLocation) {\\n                        // 格式: - 地点X: 角色1, 角色2\\n                        const subMatch = /- (.*?):(.*?)$/.exec(line);\\n                        if (subMatch) {\\n                            const subName = subMatch[1].trim();\\n                            const charactersText = subMatch[2].trim();\\n                            const characters = charactersText.split(',').map(c => c.trim()).filter(c => c);\\n                            \\n                            console.log(`  子地点: ${subName}, 角色: ${characters.join(', ') || '无'}`);\\n                            \\n                            currentSubLocations.push({\\n                                name: subName,\\n                                characters: characters\\n                            });\\n                        }\\n                    }\\n                    // 主地点结束标记\\n                    else if (line === ']' && currentMainLocation) {\\n                        data.locations.push({\\n                            name: currentMainLocation,\\n                            subLocations: currentSubLocations\\n                        });\\n                        currentMainLocation = null;\\n                        currentSubLocations = [];\\n                    }\\n                }\\n                \\n                // 处理最后一个主地点（如果有且尚未处理）\\n                if (currentMainLocation) {\\n                    data.locations.push({\\n                        name: currentMainLocation,\\n                        subLocations: currentSubLocations\\n                    });\\n                }\\n                \\n                console.log(`解析完成: 找到 ${data.locations.length} 个主地点`);\\n                if (data.locations.length > 0) {\\n                    console.log(\\\"解析后的地图数据:\\\", data);\\n                    return data;\\n                } else {\\n                    console.error(\\\"未找到有效的地点数据\\\");\\n                    return null;\\n                }\\n            } catch (error) {\\n                console.error(\\\"解析地图数据时出错:\\\", error);\\n                return null;\\n            }\\n        }\\n\\n        // 渲染地图界面\\n        function renderMapInterface(mapData) {\\n            if (!mapData) return;\\n            \\n            hasMoveBlock = mapData.moveBlocked;\\n            \\n            // 显示/隐藏移动限制提示\\n            const movementAlert = document.getElementById('movement-alert');\\n            if (hasMoveBlock) {\\n                movementAlert.classList.remove('hidden');\\n            } else {\\n                movementAlert.classList.add('hidden');\\n            }\\n            \\n            // 渲染主地点按钮\\n            const mainLocationsContainer = document.getElementById('main-locations');\\n            mainLocationsContainer.innerHTML = '';\\n            \\n            mapData.locations.forEach(location => {\\n                const button = document.createElement('button');\\n                button.className = 'location-button';\\n                \\n                // 为不同地点设置不同的图标\\n                let icon = 'fa-map';\\n                if (location.name.includes('学校')) icon = 'fa-school';\\n                else if (location.name.includes('公园')) icon = 'fa-tree';\\n                else if (location.name.includes('商业')) icon = 'fa-store';\\n                else if (location.name.includes('住宅')) icon = 'fa-home';\\n                else if (location.name.includes('站')) icon = 'fa-train';\\n                \\n                button.innerHTML = `<i class=\\\"fas ${icon}\\\"></i> ${location.name}`;\\n                button.dataset.location = location.name;\\n                \\n                button.addEventListener('click', () => selectMainLocation(location));\\n                \\n                if (hasMoveBlock) {\\n                    button.disabled = true;\\n                    button.classList.add('disabled');\\n                }\\n                \\n                mainLocationsContainer.appendChild(button);\\n            });\\n            \\n            // 隐藏子地点和详情\\n            document.getElementById('sub-locations').classList.add('hidden');\\n            document.getElementById('location-details').classList.add('hidden');\\n        }\\n        \\n        // 选择主地点\\n        function selectMainLocation(location) {\\n            if (hasMoveBlock) return;\\n            \\n            selectedMain = location;\\n            \\n            // 高亮选中的主地点按钮\\n            const allMainButtons = document.querySelectorAll('#main-locations .location-button');\\n            allMainButtons.forEach(btn => {\\n                btn.classList.remove('selected');\\n                if (btn.dataset.location === location.name) {\\n                    btn.classList.add('selected');\\n                }\\n            });\\n            \\n            // 渲染子地点\\n            const subLocationsContainer = document.getElementById('sub-locations');\\n            subLocationsContainer.innerHTML = '';\\n            \\n            location.subLocations.forEach(subLocation => {\\n                const button = document.createElement('button');\\n                button.className = 'sub-location-button';\\n                \\n                // 为不同子地点设置不同的图标\\n                let icon = 'fa-map-pin';\\n                if (subLocation.name.includes('教室')) icon = 'fa-chalkboard';\\n                else if (subLocation.name.includes('咖啡')) icon = 'fa-coffee';\\n                else if (subLocation.name.includes('图书')) icon = 'fa-book';\\n                else if (subLocation.name.includes('商店')) icon = 'fa-shopping-bag';\\n                else if (subLocation.name.includes('广场')) icon = 'fa-clock';\\n                \\n                button.innerHTML = `<i class=\\\"fas ${icon}\\\"></i> ${subLocation.name}`;\\n                button.dataset.sublocation = subLocation.name;\\n                \\n                button.addEventListener('click', () => selectSubLocation(subLocation));\\n                \\n                subLocationsContainer.appendChild(button);\\n            });\\n            \\n            // 显示子地点区域\\n            subLocationsContainer.classList.remove('hidden');\\n            \\n            // 隐藏详情区域\\n            document.getElementById('location-details').classList.add('hidden');\\n            \\n            // 重置子地点选择\\n            selectedSub = null;\\n        }\\n        \\n        // 选择子地点\\n        function selectSubLocation(subLocation) {\\n            if (hasMoveBlock) return;\\n            \\n            selectedSub = subLocation;\\n            selectedCharacters = subLocation.characters;\\n            \\n            // 高亮选中的子地点按钮\\n            const allSubButtons = document.querySelectorAll('#sub-locations .sub-location-button');\\n            allSubButtons.forEach(btn => {\\n                btn.classList.remove('selected');\\n                if (btn.dataset.sublocation === subLocation.name) {\\n                    btn.classList.add('selected');\\n                }\\n            });\\n            \\n            // 更新地点详情\\n            document.getElementById('selected-location').textContent = `${selectedMain.name} - ${subLocation.name}`;\\n            \\n            // 更新角色列表\\n            const charactersContainer = document.getElementById('location-characters');\\n            charactersContainer.innerHTML = '';\\n            \\n            if (subLocation.characters.length > 0) {\\n                subLocation.characters.forEach(character => {\\n                    const charElement = document.createElement('div');\\n                    charElement.className = 'character-item';\\n                    charElement.innerHTML = `<i class=\\\"fas fa-user\\\"></i> ${character}`;\\n                    charactersContainer.appendChild(charElement);\\n                });\\n            } else {\\n                const noCharElement = document.createElement('div');\\n                noCharElement.className = 'character-item empty';\\n                noCharElement.innerHTML = `<i class=\\\"fas fa-user-slash\\\"></i> 这里没有人`;\\n                charactersContainer.appendChild(noCharElement);\\n            }\\n            \\n            // 显示详情区域\\n            document.getElementById('location-details').classList.remove('hidden');\\n        }\\n        \\n        // 确认移动\\n        function confirmMove() {\\n            if (hasMoveBlock || !selectedMain || !selectedSub) return;\\n            \\n            const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n            const characters = selectedCharacters.join(', ');\\n            \\n            // 显示确认对话框\\n            const confirmMessage = document.getElementById('confirm-message');\\n            if (characters) {\\n                confirmMessage.textContent = `前往 ${locationName}？你可能会遇见：${characters}`;\\n            } else {\\n                confirmMessage.textContent = `前往 ${locationName}？那里好像没有人。`;\\n            }\\n            \\n            document.getElementById('confirm-overlay').classList.remove('hidden');\\n        }\\n        \\n        // 执行移动\\n        function executeMove() {\\n            if (hasMoveBlock || !selectedMain || !selectedSub) return;\\n            \\n            const locationName = `${selectedMain.name} - ${selectedSub.name}`;\\n            const characters = selectedCharacters.join(',');\\n            \\n            // 构建移动消息\\n            let message = `<request:{{user}}前往了${locationName}.`;\\n            if (characters) {\\n                message += `${characters}在那里`;\\n            }\\n            message += \\\">\\\";\\n            \\n            // 获取发送模式（直接发送或放入输入框）\\n            const directSendMode = document.getElementById('direct-send-toggle').checked;\\n            \\n            // 根据发送模式执行不同操作\\n            if (directSendMode) {\\n                // 直接发送模式 - 如果存在 triggerSlash 函数，发送消息\\n                if (typeof triggerSlash === 'function') {\\n                    try {\\n                        triggerSlash(`/send ${message} || /trigger`);\\n                    } catch (e) {\\n                        console.error(\\\"发送消息时出错:\\\", e);\\n                        alert(\\\"发送消息失败，请重试。\\\");\\n                    }\\n                } else {\\n                    console.log(\\\"移动命令:\\\", message);\\n                    alert(\\\"移动请求已生成。在实际环境中，这将发送到AI。\\\");\\n                }\\n            } else {\\n                // 仅放入输入框模式\\n                if (typeof triggerSlash === 'function') {\\n                    try {\\n                        triggerSlash(`/setinput ${message}`);\\n                    } catch (e) {\\n                        console.error(\\\"设置输入框时出错:\\\", e);\\n                        alert(\\\"设置输入框失败，请重试。\\\");\\n                    }\\n                } else {\\n                    console.log(\\\"输入框内容已设置:\\\", message);\\n                    alert(\\\"消息已放入输入框，请手动编辑和发送。\\\");\\n                }\\n            }\\n            \\n            // 隐藏确认对话框\\n            document.getElementById('confirm-overlay').classList.add('hidden');\\n            \\n            // 重置选择\\n            resetSelection();\\n        }\\n        \\n        // 重置选择\\n        function resetSelection() {\\n            selectedMain = null;\\n            selectedSub = null;\\n            selectedCharacters = [];\\n            \\n            // 清除所有选中状态\\n            document.querySelectorAll('.location-button, .sub-location-button').forEach(btn => {\\n                btn.classList.remove('selected');\\n            });\\n            \\n            // 隐藏子地点和详情\\n            document.getElementById('sub-locations').classList.add('hidden');\\n            document.getElementById('location-details').classList.add('hidden');\\n        }\\n        \\n        // 处理地图数据\\n        function processMapData() {\\n            const dataSource = document.getElementById('map-data-source');\\n            if (!dataSource) {\\n                console.error(\\\"未找到地图数据源元素\\\");\\n                return;\\n            }\\n            \\n            let mapText = null;\\n            let dataSource_used = false;\\n            console.log(\\\"开始查找地图数据...\\\");\\n            \\n            // 首先尝试从文档中获取<map_data>标签内容（最优先）\\n            function findMapDataTag(text) {\\n                if (!text) return null;\\n                \\n                // 1. 排除<details>标签内容中不完整的<map_data>标签\\n                // 首先检查是否存在<details>标签\\n                if (text.includes('<details>') && text.includes('<map_data>')) {\\n                    // 更精确的<map_data>标签匹配，确保它是完整的标签对\\n                    const mapDataRegex = /<map_data>([\\\\s\\\\S]*?)\\\\[MOVEBLOCK:(YES|NO)\\\\]([\\\\s\\\\S]*?)<\\\\/map_data>/;\\n                    const match = mapDataRegex.exec(text);\\n                    \\n                    if (match && match[2] && match[3] && match[3].includes('-')) {\\n                        console.log(\\\"找到包含完整MOVEBLOCK和子地点的<map_data>标签\\\");\\n                        const fullContent = (match[1] || '') + '[MOVEBLOCK:' + match[2] + ']' + match[3];\\n                        return fullContent.trim();\\n                    }\\n                } else {\\n                    // 如果不存在<details>标签冲突，使用简单匹配\\n                    const mapDataRegex = /<map_data>([\\\\s\\\\S]*?)<\\\\/map_data>/;\\n                    const match = mapDataRegex.exec(text);\\n                    if (match && match[1] && match[1].trim()) {\\n                        // 额外验证：确保内容包含地图数据的特征\\n                        const content = match[1].trim();\\n                        if (content.includes('[MOVEBLOCK:') && content.includes(']') && content.includes('-')) {\\n                            return content;\\n                        }\\n                    }\\n                }\\n                return null;\\n            }\\n            \\n            // 尝试从父窗口获取数据（SillyTavern环境）\\n            try {\\n                if (window.parent && window.parent !== window) {\\n                    console.log(\\\"在iframe中运行，尝试仅从当前消息获取地图数据\\\");\\n                    \\n                    // 1. 首先从URL参数中查找（最高优先级）\\n                    try {\\n                        const urlParams = new URLSearchParams(window.location.search);\\n                        const urlData = urlParams.get('data');\\n                        if (urlData) {\\n                            const decodedData = decodeURIComponent(urlData);\\n                            console.log(\\\"检查URL参数中的数据...\\\");\\n                            \\n                            // 检查URL参数中是否包含<map_data>标签\\n                            const tagData = findMapDataTag(decodedData);\\n                            if (tagData) {\\n                                console.log(\\\"在URL参数中找到<map_data>标签数据\\\");\\n                                mapText = tagData;\\n                            }\\n                        }\\n                    } catch (e) {\\n                        console.log(\\\"URL参数处理出错:\\\", e);\\n                    }\\n                    \\n                    // 2. 尝试获取当前iframe所在的消息元素\\n                    if (!mapText) {\\n                        try {\\n                            // 获取当前iframe元素\\n                            const currentIframe = window.frameElement;\\n                            if (currentIframe) {\\n                                // 查找当前iframe的父级消息元素\\n                                let parentMessage = currentIframe;\\n                                \\n                                // 向上查找直到找到消息元素\\n                                while (parentMessage && \\n                                      !parentMessage.classList.contains('mes_text') && \\n                                      !parentMessage.classList.contains('mes_content') && \\n                                      !parentMessage.classList.contains('message-content') && \\n                                      !parentMessage.classList.contains('message_text')) {\\n                                    parentMessage = parentMessage.parentElement;\\n                                }\\n                                \\n                                if (parentMessage) {\\n                                    console.log(\\\"找到当前iframe所在的消息元素\\\");\\n                                    const messageText = parentMessage.textContent || parentMessage.innerText;\\n                                    \\n                                    // 先尝试查找<map_data>标签\\n                                    const tagData = findMapDataTag(messageText);\\n                                    if (tagData) {\\n                                        console.log(\\\"在当前消息中找到<map_data>标签数据\\\");\\n                                        mapText = tagData;\\n                                    } else {\\n                                        // 尝试提取符合格式的地图数据\\n                                        const extractedData = extractMapData(messageText);\\n                                        if (extractedData) {\\n                                            console.log(\\\"在当前消息中提取到符合格式的地图数据\\\");\\n                                            mapText = extractedData;\\n                                        }\\n                                    }\\n                                } else {\\n                                    console.log(\\\"未找到当前iframe所在的消息元素\\\");\\n                                }\\n                            }\\n                        } catch (e) {\\n                            console.log(\\\"获取当前消息元素出错:\\\", e);\\n                        }\\n                    }\\n                    \\n                    // 严格的地图数据匹配，必须包含[MOVEBLOCK:开头和多个地点块\\n                    function extractMapData(text) {\\n                        if (!text) return null;\\n                        \\n                        // 更严格的地图数据匹配模式\\n                        // 1. 必须以[MOVEBLOCK:YES|NO]开头\\n                        // 2. 必须包含至少一个主地点块，以\\\"[\\\"开头，以\\\"]\\\"结尾\\n                        // 3. 主地点块内必须有至少一个子地点行，格式为\\\"- 子地点名: [角色列表]\\\"\\n                        const fullMapRegex = /\\\\[MOVEBLOCK:(YES|NO)\\\\][\\\\s\\\\n]*((?:\\\\[[\\\\s\\\\S]*?(?:-\\\\s+[^:]+:[^\\\\]]*)*\\\\][\\\\s\\\\n]*)+)/;\\n                        const match = fullMapRegex.exec(text);\\n                        \\n                        if (match && match[2] && match[2].trim()) {\\n                            const mapContent = \\\"[MOVEBLOCK:\\\" + match[1] + \\\"]\\\\n\\\" + match[2].trim();\\n                            \\n                            // 额外验证：确保数据包含主地点和子地点格式\\n                            if (mapContent.match(/\\\\[.+\\\\n\\\\s*-\\\\s+.+:/)) {\\n                                console.log(\\\"找到符合严格地图格式的数据块\\\");\\n                                return mapContent;\\n                            }\\n                        }\\n                        return null;\\n                    }\\n                }\\n            } catch (e) {\\n                console.log(\\\"数据获取过程出错:\\\", e);\\n            }\\n            \\n            // 如果在其他地方找不到地图数据，使用dataSource中的数据\\n            if (!mapText) {\\n                const sourceText = dataSource.textContent || dataSource.innerText;\\n                if (sourceText && sourceText.trim()) {\\n                    console.log(\\\"使用data-source中的地图数据\\\");\\n                    mapText = sourceText;\\n                    dataSource_used = true;\\n                }\\n            }\\n            \\n            // 如果仍然没有找到有效数据，使用测试数据\\n            if (!mapText || (!mapText.includes('[MOVEBLOCK:') && !mapText.includes('- ') && !mapText.includes(']'))) {\\n                console.log(\\\"未找到有效地图数据，使用测试数据\\\");\\n                mapText = `[MOVEBLOCK:NO]\\n[校园区域\\n- 教学楼: 班主任, 数学老师\\n- 图书馆: 文学社社长, 图书管理员\\n- 操场: 体育老师, 田径队队长]\\n[商业街\\n- 咖啡厅: 服务员小雅, 钢琴少女\\n- 游戏厅: 游戏高手小明, 不良少年\\n- 书店: 眼镜店主, 神秘顾客]\\n[住宅区\\n- 公寓楼: 邻居阿姨, 宠物猫咪\\n- 小公园: 晨练老人, 遛狗少年\\n- 便利店: 店长, 兼职学生]`;\\n                \\n                if (!dataSource_used) {\\n                    dataSource.textContent = mapText;\\n                    console.log(\\\"已设置测试数据\\\");\\n                }\\n            }\\n            \\n            // 兼容旧版数据格式（EMOTION -> MOVEBLOCK）\\n            if (mapText && mapText.includes('[EMOTION:')) {\\n                console.log(\\\"转换旧版数据格式（EMOTION -> MOVEBLOCK）\\\");\\n                mapText = mapText.replace(/\\\\[EMOTION:(BAD|GOOD)\\\\]/g, function(match, state) {\\n                    return `[MOVEBLOCK:${state === 'BAD' ? 'YES' : 'NO'}]`;\\n                });\\n            }\\n            \\n            // 检查提取的数据质量\\n            let isValidMapData = false;\\n            if (mapText) {\\n                try {\\n                    // 检查数据是否包含必要的地图元素，使用更严格的验证\\n                    const hasMoveBlock = mapText.includes('[MOVEBLOCK:');\\n                    const hasProperLocation = !!mapText.match(/\\\\[(?!MOVEBLOCK)[^\\\\[\\\\]<>]+\\\\n\\\\s*-\\\\s+[^:]+:/);\\n                    \\n                    isValidMapData = hasMoveBlock && hasProperLocation;\\n                    console.log(\\\"地图数据质量检查:\\\", isValidMapData ? \\\"有效\\\" : \\\"无效\\\", \\n                        \\\"| 包含MOVEBLOCK:\\\", hasMoveBlock, \\n                        \\\"| 包含正确格式的地点块:\\\", hasProperLocation);\\n                    \\n                    if (isValidMapData) {\\n                        // 打印找到的地图数据的完整结构（为了调试）\\n                        console.log(\\\"地图数据结构验证:\\\");\\n                        const moveblockMatch = /\\\\[MOVEBLOCK:(YES|NO)\\\\]/.exec(mapText);\\n                        if (moveblockMatch) {\\n                            console.log(\\\"- MOVEBLOCK状态:\\\", moveblockMatch[1]);\\n                        }\\n                        \\n                        // 计算主地点和子地点数量\\n                        const mainLocCount = (mapText.match(/\\\\[(?!MOVEBLOCK:)[^\\\\[\\\\]<>]+\\\\n/g) || []).length;\\n                        const subLocCount = (mapText.match(/\\\\n\\\\s*-\\\\s+[^:]+:/g) || []).length;\\n                        console.log(`- 包含 ${mainLocCount} 个主地点, ${subLocCount} 个子地点`);\\n                        \\n                        if (mainLocCount === 0 || subLocCount === 0) {\\n                            console.warn(\\\"地图数据格式异常：缺少主地点或子地点\\\");\\n                            isValidMapData = false;\\n                        }\\n                    }\\n                    \\n                    if (!isValidMapData) {\\n                        console.warn(\\\"提取的地图数据不完整或格式不正确\\\");\\n                        console.log(\\\"问题数据样本:\\\", mapText.substring(0, Math.min(200, mapText.length)));\\n                    }\\n                } catch (e) {\\n                    console.error(\\\"验证地图数据时出错:\\\", e);\\n                    isValidMapData = false;\\n                }\\n            }\\n            \\n            // 调试输出处理后的地图数据\\n            console.log(\\\"准备解析的地图数据:\\\", mapText ? (mapText.substring(0, Math.min(100, mapText.length)) + \\\"...\\\") : \\\"无数据\\\");\\n            \\n            // 现在解析和渲染地图数据\\n            try {\\n                mapData = parseMapData(mapText);\\n                \\n                if (mapData && mapData.locations && mapData.locations.length > 0) {\\n                    console.log(`成功解析地图数据: ${mapData.locations.length} 个主地点`);\\n                    renderMapInterface(mapData);\\n                } else {\\n                    console.error(\\\"地图数据解析失败或没有地点数据\\\");\\n                    if (mapText) {\\n                        console.log(\\\"原始数据:\\\", mapText.substring(0, Math.min(300, mapText.length)));\\n                    }\\n                }\\n            } catch (e) {\\n                console.error(\\\"解析或渲染地图数据时出错:\\\", e);\\n            }\\n        }\\n        \\n        // 注册事件监听器\\n        function setupEventListeners() {\\n            // 确认移动按钮\\n            document.getElementById('confirm-move-btn').addEventListener('click', confirmMove);\\n            \\n            // 确认对话框按钮\\n            document.getElementById('cancel-move-btn').addEventListener('click', () => {\\n                document.getElementById('confirm-overlay').classList.add('hidden');\\n            });\\n            \\n            document.getElementById('execute-move-btn').addEventListener('click', executeMove);\\n            \\n            // 发送模式切换按钮\\n            const toggleSwitch = document.getElementById('direct-send-toggle');\\n            if (toggleSwitch) {\\n                toggleSwitch.addEventListener('change', function() {\\n                    const label = this.parentElement.nextElementSibling;\\n                    if (this.checked) {\\n                        label.textContent = \\\"直接发送\\\";\\n                        label.style.color = \\\"var(--gal-success)\\\";\\n                    } else {\\n                        label.textContent = \\\"放入输入框\\\";\\n                        label.style.color = \\\"var(--gal-primary)\\\";\\n                    }\\n                });\\n                \\n                // 初始状态设置\\n                const label = toggleSwitch.parentElement.nextElementSibling;\\n                if (toggleSwitch.checked) {\\n                    label.textContent = \\\"直接发送\\\";\\n                    label.style.color = \\\"var(--gal-success)\\\";\\n                } else {\\n                    label.textContent = \\\"放入输入框\\\";\\n                    label.style.color = \\\"var(--gal-primary)\\\";\\n                }\\n            }\\n        }\\n        \\n        // 初始化\\n        function init() {\\n            // 设置事件监听器\\n            setupEventListeners();\\n            \\n            // 处理地图数据\\n            processMapData();\\n            \\n            // 监听SillyTavern消息更新\\n            if (window.parent && window.parent !== window && typeof window.parent.eventOn === 'function' && window.parent.tavern_events) {\\n                // 获取当前iframe所在的消息元素ID\\n                let currentMessageId = null;\\n                try {\\n                    const currentIframe = window.frameElement;\\n                    if (currentIframe) {\\n                        // 查找当前iframe的父级消息元素\\n                        let parentMessage = currentIframe;\\n                        while (parentMessage && \\n                              !parentMessage.classList.contains('mes_block') && \\n                              !parentMessage.classList.contains('mes_wrap') && \\n                              !parentMessage.classList.contains('message-wrap')) {\\n                            parentMessage = parentMessage.parentElement;\\n                        }\\n                        \\n                        if (parentMessage && parentMessage.id) {\\n                            currentMessageId = parentMessage.id;\\n                            console.log(\\\"当前iframe所在消息ID:\\\", currentMessageId);\\n                        }\\n                    }\\n                } catch (e) {\\n                    console.log(\\\"获取当前消息ID出错:\\\", e);\\n                }\\n                \\n                // 只在当前消息更新时刷新地图数据\\n                window.parent.eventOn(window.parent.tavern_events.MESSAGE_UPDATED, (messageId) => {\\n                    if (currentMessageId && messageId === currentMessageId) {\\n                        console.log(\\\"当前消息已更新，刷新地图数据\\\");\\n                        setTimeout(processMapData, 1500);\\n                    }\\n                });\\n                \\n                // 如果无法确定具体消息ID，则默认使用全局更新监听\\n                if (!currentMessageId) {\\n                    window.parent.eventOn(window.parent.tavern_events.MESSAGE_UPDATED, () => {\\n                        setTimeout(processMapData, 1500);\\n                    });\\n                    window.parent.eventOn(window.parent.tavern_events.MESSAGE_RECEIVED, () => {\\n                        setTimeout(processMapData, 1500);\\n                    });\\n                }\\n            }\\n        }\\n        \\n        // 页面加载完成后初始化\\n        document.addEventListener('DOMContentLoaded', init);\\n    </script>\\n    \\n    <style>\\n        @import url('https://fonts.googleapis.com/css2?family=ZCOOL+XiaoWei&family=ZCOOL+QingKe+HuangYou&display=swap');\\n        \\n        :root {\\n            /* 莫兰迪色系 */\\n            --gal-bg-light: #f8f4f0;      /* 背景 - 极浅米白 */\\n            --gal-bg-medium: #e8e2d9;     /* 中等背景 - 浅灰褐色 */\\n            --gal-border: #d3c6b9;       /* 边框/点缀 - 柔和米棕 */\\n            --gal-text-dark: #6b5f56;     /* 深色文字 - 柔和深棕 */\\n            --gal-text-muted: #a39589;    /* 浅色文字 - 中灰棕 */\\n            --gal-primary: #b4a295;       /* 主色 - 灰玫瑰棕 */\\n            --gal-primary-light: #dcd1c7; /* 浅主色 */\\n            --gal-success: #a5bdaa;       /* 成功 - 柔和绿 */\\n            --gal-warning: #e5d7b3;       /* 警告 - 柔和黄 */\\n            --gal-danger: #d8a097;        /* 危险 - 柔和粉红 */\\n            --gal-pink: #e6c6c6;          /* 粉色 - 柔和粉 */\\n            --gal-purple: #c8b9d3;        /* 紫色 - 柔和薰衣草紫 */\\n            \\n            --font-title: 'ZCOOL QingKe HuangYou', sans-serif;\\n            --font-main: 'ZCOOL XiaoWei', \\\"Microsoft YaHei\\\", sans-serif;\\n\\n            /* Material Design 风格 */\\n            --md-border-radius-large: 20px; /* 大圆角 */\\n            --md-border-radius-medium: 16px;/* 中圆角 */\\n            --md-border-radius-small: 12px; /* 小圆角 */\\n            --md-shadow-1: 0 2px 4px rgba(0, 0, 0, 0.08); /* 细微阴影 */\\n            --md-shadow-2: 0 4px 8px rgba(0, 0, 0, 0.1);  /* 轻度阴影 */\\n            --md-shadow-3: 0 6px 12px rgba(0, 0, 0, 0.12); /* 中度阴影 */\\n            --md-shadow-hover: 0 8px 16px rgba(0, 0, 0, 0.15); /* 悬停阴影 */\\n        }\\n        \\n        body {\\n            background-color: transparent; /* or var(--gal-bg-light) if not transparent */\\n            margin: 0;\\n            padding: 10px; /* Add some padding around the body */\\n            font-family: var(--font-main);\\n            color: var(--gal-text-dark);\\n            box-sizing: border-box;\\n        }\\n        \\n        /* 地图界面容器 */\\n        .map-interface {\\n            max-width: 100%;\\n            width: 100%;\\n            margin: 0 auto;\\n            background: var(--gal-bg-light);\\n            border: 1px solid var(--gal-border); /* Thinner border */\\n            border-radius: var(--md-border-radius-large); /* 大圆角 */\\n            box-shadow: var(--md-shadow-2); /* 应用阴影 */\\n            padding: 25px;\\n            box-sizing: border-box;\\n            position: relative;\\n            overflow: hidden;\\n        }\\n        \\n        /* 地图标题 */\\n        .map-header {\\n            text-align: center;\\n            margin-bottom: 25px;\\n            padding-bottom: 15px;\\n            border-bottom: 1px solid var(--gal-border); /* 更细的分割线 */\\n            display: flex;\\n            flex-direction: column;\\n            align-items: center;\\n            position: relative;\\n        }\\n        \\n        .map-header h2 {\\n            font-size: 26px; /* Slightly smaller */\\n            margin: 0;\\n            padding: 5px;\\n            line-height: 1.4;\\n            color: var(--gal-primary);\\n            font-family: var(--font-title);\\n            position: relative;\\n        }\\n        \\n        .map-header h2:before,\\n        .map-header h2:after {\\n            content: '✧'; /* Changed icon */\\n            display: inline-block;\\n            margin: 0 10px;\\n            color: var(--gal-pink);\\n            font-size: 18px;\\n            opacity: 0.8;\\n        }\\n\\n        /* 地图控制区域 */\\n        .map-controls {\\n            position: absolute;\\n            top: 0;\\n            right: 0;\\n            display: flex;\\n            align-items: center;\\n        }\\n        \\n        /* 发送模式切换 */\\n        .send-mode-toggle {\\n            display: flex;\\n            align-items: center;\\n            font-size: 14px;\\n            color: var(--gal-text-muted);\\n        }\\n        \\n        .toggle-label {\\n            margin-left: 8px;\\n            font-family: var(--font-main);\\n            transition: color 0.2s ease;\\n        }\\n        \\n        /* 开关样式 */\\n        .toggle-switch {\\n            position: relative;\\n            display: inline-block;\\n            width: 36px;\\n            height: 20px;\\n        }\\n        \\n        .toggle-switch input {\\n            opacity: 0;\\n            width: 0;\\n            height: 0;\\n        }\\n        \\n        .toggle-slider {\\n            position: absolute;\\n            cursor: pointer;\\n            top: 0;\\n            left: 0;\\n            right: 0;\\n            bottom: 0;\\n            background-color: var(--gal-bg-medium);\\n            border: 1px solid var(--gal-border);\\n            transition: .3s;\\n            border-radius: 20px;\\n        }\\n        \\n        .toggle-slider:before {\\n            position: absolute;\\n            content: \\\"\\\";\\n            height: 14px;\\n            width: 14px;\\n            left: 2px;\\n            bottom: 2px;\\n            background-color: white;\\n            transition: .3s;\\n            border-radius: 50%;\\n        }\\n        \\n        input:checked + .toggle-slider {\\n            background-color: var(--gal-success);\\n            border-color: var(--gal-success);\\n        }\\n        \\n        input:checked + .toggle-slider:before {\\n            transform: translateX(16px);\\n        }\\n        \\n        /* 响应式开关 */\\n        @media (max-width: 480px) {\\n            .map-controls {\\n                position: relative;\\n                margin-top: 10px;\\n                width: 100%;\\n                justify-content: center;\\n            }\\n            \\n            .toggle-switch {\\n                width: 32px;\\n                height: 18px;\\n            }\\n            \\n            .toggle-slider:before {\\n                height: 12px;\\n                width: 12px;\\n            }\\n            \\n            input:checked + .toggle-slider:before {\\n                transform: translateX(14px);\\n            }\\n            \\n            .toggle-label {\\n                font-size: 13px;\\n            }\\n        }\\n        \\n        /* 移动限制提示 */\\n        .movement-alert {\\n            background-color: var(--gal-warning);\\n            border: 1px solid rgba(229, 215, 179, 0.8); /* Lighter border */\\n            border-radius: var(--md-border-radius-medium); /* 圆角 */\\n            padding: 15px;\\n            margin-bottom: 25px;\\n            text-align: center;\\n            color: var(--gal-text-dark);\\n            font-weight: normal; /* Less emphasis */\\n            box-shadow: var(--md-shadow-1);\\n            animation: pulse-movement 2.5s infinite ease-in-out; /* Smoother pulse */\\n        }\\n        \\n        @keyframes pulse-movement {\\n            0%, 100% { opacity: 0.9; }\\n            50% { opacity: 1; transform: scale(1.01); }\\n        }\\n        \\n        .movement-alert i {\\n            margin-right: 8px;\\n            color: var(--gal-text-muted); /* Muted icon color */\\n        }\\n        \\n        /* 地点选择网格 */\\n        .location-grid {\\n            display: grid;\\n            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); /* Slightly smaller min */\\n            gap: 15px;\\n            margin-bottom: 25px;\\n        }\\n        \\n        .location-button {\\n            background-color: white; /* Cleaner look */\\n            border: 1px solid var(--gal-border);\\n            border-radius: var(--md-border-radius-medium); /* 圆角 */\\n            padding: 15px;\\n            color: var(--gal-text-dark);\\n            font-family: var(--font-main);\\n            font-size: 15px; /* Slightly smaller */\\n            cursor: pointer;\\n            transition: background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.3s ease, transform 0.2s ease; /* Smooth transitions */\\n            text-align: center;\\n            box-shadow: var(--md-shadow-1);\\n        }\\n        \\n        .location-button:hover:not(.disabled) {\\n            background-color: var(--gal-bg-medium); /* Subtle hover */\\n            border-color: var(--gal-primary);\\n            transform: translateY(-2px); /* 微交互 */\\n            box-shadow: var(--md-shadow-hover); /* 微交互 */\\n        }\\n        \\n        .location-button.selected {\\n            background-color: var(--gal-primary);\\n            border-color: var(--gal-primary);\\n            color: white;\\n            transform: translateY(-2px);\\n            box-shadow: var(--md-shadow-3);\\n        }\\n        \\n        .location-button.disabled {\\n            opacity: 0.6;\\n            cursor: not-allowed;\\n            background-color: var(--gal-bg-medium);\\n            box-shadow: none;\\n        }\\n        \\n        .location-button i {\\n            margin-right: 8px;\\n            color: var(--gal-primary);\\n            transition: color 0.2s ease;\\n        }\\n        \\n        .location-button.selected i {\\n            color: white;\\n        }\\n        \\n        /* 次级地点选择 */\\n        .sub-location-grid {\\n            display: grid;\\n            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\\n            gap: 12px;\\n            margin-bottom: 25px;\\n            padding: 20px;\\n            background-color: var(--gal-bg-medium);\\n            border-radius: var(--md-border-radius-medium);\\n            border: 1px solid var(--gal-border);\\n        }\\n        \\n        .sub-location-button {\\n            background-color: var(--gal-bg-light);\\n            border: 1px solid var(--gal-border);\\n            border-radius: var(--md-border-radius-small); /* 圆角 */\\n            padding: 12px 18px;\\n            color: var(--gal-text-dark);\\n            font-family: var(--font-main);\\n            font-size: 14px;\\n            cursor: pointer;\\n            transition: background-color 0.2s ease, border-color 0.2s ease, box-shadow 0.3s ease, transform 0.2s ease; /* Smooth transitions */\\n            text-align: left;\\n            box-shadow: var(--md-shadow-1);\\n        }\\n        \\n        .sub-location-button:hover {\\n            background-color: white;\\n            border-color: var(--gal-primary);\\n            transform: translateY(-2px); /* 微交互 */\\n            box-shadow: var(--md-shadow-hover); /* 微交互 */\\n        }\\n        \\n        .sub-location-button.selected {\\n            background-color: var(--gal-primary);\\n            border-color: var(--gal-primary);\\n            color: white;\\n            transform: translateY(-2px);\\n            box-shadow: var(--md-shadow-3);\\n        }\\n        \\n        .sub-location-button i {\\n            margin-right: 10px;\\n            color: var(--gal-primary);\\n            transition: color 0.2s ease;\\n        }\\n        \\n        .sub-location-button.selected i {\\n            color: white;\\n        }\\n        \\n        /* 地点详情 */\\n        .location-details {\\n            margin-top: 25px;\\n            padding: 25px;\\n            background-color: white;\\n            border-radius: var(--md-border-radius-large); /* 大圆角 */\\n            border: 1px solid var(--gal-border);\\n            box-shadow: var(--md-shadow-2);\\n        }\\n        \\n        .detail-header {\\n            font-size: 18px; /* Slightly smaller */\\n            font-weight: normal; /* Normal weight */\\n            margin-bottom: 20px;\\n            padding-bottom: 15px;\\n            border-bottom: 1px solid var(--gal-border); /* Thinner border */\\n            color: var(--gal-primary);\\n            text-align: center;\\n        }\\n        \\n        .detail-header i {\\n            margin-right: 8px;\\n        }\\n        \\n        .section-title {\\n            font-size: 15px; /* Slightly smaller */\\n            color: var(--gal-text-muted);\\n            margin-bottom: 15px;\\n            font-weight: normal; /* Normal weight */\\n        }\\n        \\n        .section-title i {\\n            margin-right: 8px;\\n            color: var(--gal-primary);\\n        }\\n        \\n        .character-list {\\n            display: grid;\\n            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\\n            gap: 12px;\\n            margin-bottom: 25px;\\n        }\\n        \\n        .character-item {\\n            background-color: var(--gal-bg-light);\\n            border: 1px solid var(--gal-border);\\n            border-radius: var(--md-border-radius-small); /* 圆角 */\\n            padding: 12px;\\n            font-size: 14px;\\n            transition: all 0.2s ease;\\n        }\\n        \\n        .character-item:hover {\\n            transform: translateY(-1px) scale(1.02); /* Subtle hover */\\n            box-shadow: var(--md-shadow-1);\\n            border-color: var(--gal-primary-light);\\n        }\\n        \\n        .character-item i {\\n            margin-right: 8px;\\n            color: var(--gal-primary);\\n        }\\n        \\n        .character-item.empty {\\n            color: var(--gal-text-muted);\\n            opacity: 0.7;\\n            background-color: var(--gal-bg-medium);\\n            text-align: center;\\n        }\\n         .character-item.empty i {\\n            display: block;\\n            margin: 0 auto 5px auto; /* Center icon */\\n            color: var(--gal-text-muted);\\n        }\\n        \\n        .action-section {\\n            margin-top: 25px;\\n            text-align: center;\\n        }\\n        \\n        .action-button {\\n            background-color: var(--gal-success);\\n            color: white; /* White text on colored button */\\n            border: none;\\n            border-radius: 50px; /* Fully rounded */\\n            padding: 12px 35px; /* More padding */\\n            font-size: 16px;\\n            font-weight: normal; /* Normal weight */\\n            cursor: pointer;\\n            transition: background-color 0.2s ease, box-shadow 0.3s ease, transform 0.2s ease; /* Smooth transitions */\\n            box-shadow: var(--md-shadow-2);\\n            letter-spacing: 0.5px; /* Slight letter spacing */\\n        }\\n        \\n        .action-button:hover {\\n            background-color: #96b09b; /* Darker success on hover */\\n            transform: translateY(-2px); /* 微交互 */\\n            box-shadow: var(--md-shadow-hover); /* 微交互 */\\n        }\\n        \\n        .action-button i {\\n            margin-right: 8px;\\n        }\\n        \\n        /* 确认对话框 */\\n        .modal-overlay {\\n            position: fixed;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n            background-color: rgba(50, 50, 50, 0.6); /* Darker overlay */\\n            backdrop-filter: blur(4px); /* Stronger blur */\\n            display: flex;\\n            justify-content: center;\\n            align-items: center;\\n            z-index: 1000;\\n            opacity: 0;\\n            transition: opacity 0.3s ease;\\n            pointer-events: none;\\n        }\\n        \\n        .modal-overlay:not(.hidden) {\\n           opacity: 1;\\n           pointer-events: auto;\\n        }\\n\\n        .confirm-dialog {\\n            background-color: white;\\n            border: none; /* Remove border */\\n            border-radius: var(--md-border-radius-large); /* 大圆角 */\\n            padding: 30px;\\n            width: 90%;\\n            max-width: 380px;\\n            box-shadow: var(--md-shadow-3);\\n            transform: scale(0.95);\\n            transition: transform 0.3s ease;\\n        }\\n\\n        .modal-overlay:not(.hidden) .confirm-dialog {\\n           transform: scale(1);\\n        }\\n        \\n        .confirm-dialog h4 {\\n            color: var(--gal-primary);\\n            margin-top: 0;\\n            margin-bottom: 20px;\\n            font-family: var(--font-title);\\n            text-align: center;\\n            font-size: 20px; /* Slightly smaller */\\n        }\\n        \\n        .confirm-dialog p {\\n            margin-bottom: 30px; /* More space */\\n            line-height: 1.7;\\n            text-align: center;\\n            font-size: 15px;\\n            color: var(--gal-text-muted);\\n        }\\n        \\n        .dialog-buttons {\\n            display: flex;\\n            justify-content: space-around; /* Space around */\\n            gap: 15px;\\n        }\\n        \\n        .dialog-button {\\n            flex-grow: 1; /* Buttons take equal space */\\n            padding: 10px 20px;\\n            border-radius: 50px; /* Fully rounded */\\n            cursor: pointer;\\n            transition: background-color 0.2s ease, box-shadow 0.3s ease, transform 0.2s ease; /* Smooth transitions */\\n            border: none;\\n            font-family: var(--font-main);\\n            font-size: 15px;\\n            font-weight: normal; /* Normal weight */\\n            text-align: center;\\n        }\\n        \\n        .cancel-button {\\n            background-color: var(--gal-bg-medium); /* Muted background */\\n            color: var(--gal-text-dark);\\n            box-shadow: var(--md-shadow-1);\\n        }\\n        \\n        .cancel-button:hover {\\n            background-color: var(--gal-border); /* Slightly darker */\\n            transform: translateY(-2px); /* 微交互 */\\n            box-shadow: var(--md-shadow-2); /* 微交互 */\\n        }\\n        \\n        .confirm-button {\\n            background-color: var(--gal-success);\\n            color: white; /* White text */\\n            box-shadow: var(--md-shadow-2);\\n        }\\n        \\n        .confirm-button:hover {\\n            background-color: #96b09b; /* Darker success */\\n            transform: translateY(-2px); /* 微交互 */\\n            box-shadow: var(--md-shadow-hover); /* 微交互 */\\n        }\\n\\n        .dialog-button i {\\n            margin-right: 6px;\\n        }\\n        \\n        /* 通用辅助类 */\\n        .hidden {\\n            /* Keep display: none, but handle overlay visibility with opacity */\\n            display: none;\\n        }\\n        \\n        /* 响应式样式 */\\n        @media (max-width: 700px) {\\n            .location-grid,\\n            .sub-location-grid {\\n                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); /* Adjust for smaller screens */\\n            }\\n            \\n            .character-list {\\n                grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));\\n            }\\n\\n             .map-interface {\\n                padding: 20px;\\n            }\\n            .confirm-dialog {\\n                padding: 25px;\\n            }\\n        }\\n        \\n        @media (max-width: 480px) {\\n            body {\\n                padding: 5px;\\n            }\\n            .map-interface {\\n                padding: 15px;\\n                border-radius: var(--md-border-radius-medium);\\n            }\\n            .location-grid,\\n            .sub-location-grid {\\n                grid-template-columns: repeat(2, 1fr); /* Two columns */\\n                gap: 10px;\\n            }\\n             .sub-location-grid {\\n                padding: 15px;\\n            }\\n            .location-button {\\n                padding: 12px;\\n                font-size: 14px;\\n            }\\n             .sub-location-button {\\n                padding: 10px 15px;\\n                font-size: 13px;\\n            }\\n\\n            .character-list {\\n                grid-template-columns: repeat(2, 1fr); /* Two columns */\\n                 gap: 10px;\\n            }\\n             .character-item {\\n                padding: 10px;\\n                font-size: 13px;\\n            }\\n            \\n            .map-header h2 {\\n                font-size: 22px;\\n            }\\n            .map-header h2:before,\\n            .map-header h2:after {\\n                font-size: 16px;\\n                margin: 0 5px;\\n            }\\n            .movement-alert {\\n                 padding: 12px;\\n                 font-size: 14px;\\n            }\\n             .detail-header {\\n                font-size: 16px;\\n            }\\n            .section-title {\\n                font-size: 14px;\\n            }\\n            .action-button {\\n                padding: 10px 30px;\\n                font-size: 15px;\\n            }\\n\\n            .confirm-dialog {\\n                padding: 20px;\\n                width: 95%;\\n                 border-radius: var(--md-border-radius-medium);\\n            }\\n             .confirm-dialog h4 {\\n                font-size: 18px;\\n            }\\n             .confirm-dialog p {\\n                 font-size: 14px;\\n                 margin-bottom: 25px;\\n            }\\n             .dialog-buttons {\\n                flex-direction: column;\\n                gap: 12px;\\n            }\\n             .dialog-button {\\n                font-size: 14px;\\n            }\\n            .cancel-button {\\n                order: 2;\\n            }\\n            .confirm-button {\\n                order: 1;\\n            }\\n        }\\n    </style>\\n</body>\\n</html>\\n```\",\"trimStrings\":[],\"placement\":[2],\"disabled\":false,\"markdownOnly\":true,\"promptOnly\":false,\"runOnEdit\":true,\"substituteRegex\":0,\"minDepth\":null,\"maxDepth\":null}],\"TavernHelper_scripts\":[]},\"group_only_greetings\":[],\"character_book\":{\"entries\":[{\"id\":0,\"keys\":[],\"secondary_keys\":[],\"comment\":\"\",\"content\":\"# 任务：\\n根据前面的故事叙述和上下文，生成一个结构化的、可折叠的“地图导航”数据块。此数据块应紧跟在 `</content>` 标签之后，或者如果该标签不存在，则出现在故事正文的末尾。\\n\\n# 核心逻辑与内容要求：\\n1.  **分析上下文**：评估故事的设定、当前场景、已确定的角色位置、人物关系以及 `{{user}}` 的状态。\\n2.  **判断移动性 (`MOVEBLOCK`)**：\\n    *   如果故事上下文表明 `{{user}}` 无法自由移动（例如，被捕、被锁住、失去行动能力），则在 `<map_data>` 的开头包含标签 `[MOVEBLOCK:YES]`。\\n    *   否则，包含标签 `[MOVEBLOCK:NO]`。\\n3.  **确定地点**：\\n    *   根据当前故事范围定义 3 到 5 个相关的**主地点**。\\n    *   为每个主地点列出 2 到 4 个相关的**次级地点**。\\n4.  **填充角色**：\\n    *   为每个次级地点列出当前推测在那里的角色，用逗号分隔。\\n    *   角色安置必须符合逻辑，并与故事叙述和既定事实保持一致。\\n    *   优先使用故事中已经引入的角色。\\n    *   如果某个次级地点没有已知角色，则在冒号后留空。\\n\\n# 约束条件：\\n1.  **用户排除**：角色 `{{user}}` 绝对不能出现在地图数据列表的任何位置。\\n2.  **当前场景角色排除**：在生成此地图之前紧邻的*当前*场景中，正在与 `{{user}}` 积极互动的角色，绝对不能被列在 `<map_data>` 内的*任何*地点。他们被视为处于用户（未映射）的位置。\\n3.  **角色唯一性**：通常情况下，每个角色应只出现在地图数据中的一个位置。避免在多个地点重复出现同一角色，除非叙事明确支持（这种情况很少见）。如有必要，引入通用 NPC（例如，“路人”、“店主”）来合乎逻辑地填充区域，避免不恰当地重用主要角色。\\n4.  **冒险元素（可选）**：对于明确标识为冒险类型的故事，您可以在相关的次级地点包含非角色元素，如“宝箱”、“怪物”、“敌方守卫”等，将它们视为角色条目处理。\\n\\n# 输出格式：\\n严格遵守以下可折叠的 HTML 和自定义标签格式：\\n\\n<details>\\n<summary>**地图导航**</summary>\\n<map_data>\\n[MOVEBLOCK:YES/NO]\\n[主地点1名称\\n - 次级地点A: 角色1, 角色2\\n - 次级地点B: 角色3\\n - 次级地点C:\\n]\\n[主地点2名称\\n - 次级地点D: 角色4, NPC1\\n - 次级地点E: 冒险元素1\\n]\\n[主地点3名称\\n - 次级地点F:\\n - 次级地点G: 角色5\\n]\\n</map_data>\\n</details>\\n\\n确保输出*仅*基于此地图块之前文本中已建立的故事上下文、角色状态和关系来生成。\\n\",\"constant\":true,\"selective\":true,\"insertion_order\":100,\"enabled\":true,\"position\":\"after_char\",\"use_regex\":true,\"extensions\":{\"position\":4,\"exclude_recursion\":false,\"display_index\":0,\"probability\":100,\"useProbability\":true,\"depth\":0,\"selectiveLogic\":0,\"group\":\"\",\"group_override\":false,\"group_weight\":100,\"prevent_recursion\":false,\"delay_until_recursion\":false,\"scan_depth\":null,\"match_whole_words\":null,\"use_group_scoring\":false,\"case_sensitive\":null,\"automation_id\":\"\",\"role\":0,\"vectorized\":false,\"sticky\":0,\"cooldown\":0,\"delay\":0}}],\"name\":\"地图导航模块\"}},\"create_date\":\"2025-6-10 @08h 55m 04s 660ms\",\"chat\":\"2025-6-10 @08h 55m 04s 660ms\"}"}